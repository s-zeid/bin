#!/usr/bin/env python2

from __future__ import with_statement

import atexit
import os
import subprocess
import sys
import time
import traceback

def return_prompt():
 sys.stdout.write("Press ^C to exit... ")
 sys.stdout.flush()
 try:
  while True:
   time.sleep(50)
 except KeyboardInterrupt:
  print

atexit.register(return_prompt)

if len(sys.argv) == 1:
 print "Usage: %s [command]" % sys.argv[0]
 sys.exit(2)

args = sys.argv[1:]
run_script = ""
shell = True
if args[0].endswith("geany_run_script.bat") or (args[0] == "-e" and
                                                args[1] == ("/bin/sh " +
                                                "./geany_run_script.sh")):
 if args[0].endswith(".bat"):
  run_script = os.path.abspath(args[0])
  shell = False
 else:
  run_script = os.path.abspath("./geany_run_script.sh")
 with open(run_script) as f:
  if args[0].endswith(".bat"):
   args = f.read().splitlines()[0]
  else:
   args = f.read().splitlines()[4]
 try:
  os.remove(run_script)
 except:
  print "warning: could not remove %s" % run_script
  print "(%s)" % traceback.format_exc().splitlines()[-1]
  print "==================================="

try:
 r = subprocess.call(args, shell=shell)
 print "=============================="
 print "(process exited with code %s)" % r
 sys.exit(r)
except SystemExit:
 pass
except KeyboardInterrupt:
 print "\n======================"
 print "(^C pressed)"
 sys.exit(126)
except OSError:
 if sys.exc_info()[1][0] == 2:
  print "No such file or directory: " + " ".join(args)
  sys.exit(127)
 else:
  print "\n=================================="
  traceback.print_exc()
  print "=================================="
  print "(Unhandled operating system error)"
  sys.exit(127)
except:
 print "\n=================================="
 traceback.print_exc()
 print "=================================="
 print "(Unhandled Python error)"
 sys.exit(127)
