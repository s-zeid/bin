#!/usr/bin/env python2

from __future__ import with_statement

import errno
import os
import subprocess
import sys
import time
import traceback

def return_prompt():
 sys.stdout.write("Press ^C to exit... ")
 sys.stdout.flush()
 try:
  while True:
   time.sleep(50)
 except KeyboardInterrupt:
  print
 
def command_wrapper(argv):
 run_script = ""
 shell = True
 if argv[0].endswith("geany_run_script.bat") or (argv[0] == "-e" and
                                                 argv[1] == ("/bin/sh " +
                                                 "./geany_run_script.sh")):
  if argv[0].endswith(".bat"):
   run_script = os.path.abspath(argv[0])
   shell = False
  else:
   run_script = os.path.abspath("./geany_run_script.sh")
  with open(run_script) as f:
   if argv[0].endswith(".bat"):
    argv = f.read().splitlines()[0]
   else:
    argv = f.read().splitlines()[4]
  try:
   os.remove(run_script)
  except:
   print >> sys.stderr, "warning: could not remove %s" % run_script
   print >> sys.stderr, "(%s)" % traceback.format_exc().splitlines()[-1]
   print >> sys.stderr, "==================================="
 
 if isinstance(argv, (list, tuple)) and len(argv) > 1:
  shell = False
 
 try:
  r = subprocess.call(argv, shell=shell)
  print >> sys.stderr, "=============================="
  print >> sys.stderr, "(process exited with code %s)" % r
  return_prompt()
  return r
 except SystemExit:
  pass
 except KeyboardInterrupt:
  print >> sys.stderr, "\n======================"
  print >> sys.stderr, "(^C pressed)"
  return 126
 except OSError:
  if sys.exc_info()[1][0] == errno.ENOENT:
   print >> sys.stderr, "No such file or directory: " + " ".join(argv)
   return 127
  else:
   print >> sys.stderr, "\n=================================="
   print >> sys.stderr, traceback.format_exc()
   print >> sys.stderr, "=================================="
   print >> sys.stderr, "(Unhandled operating system error)"
   return 127
 except:
  print >> sys.stderr, "\n=================================="
  print >> sys.stderr, traceback.format_exc()
  print >> sys.stderr, "=================================="
  print >> sys.stderr, "(Unhandled Python error)"
  return 127

def main(argv):
 if len(argv) == 1:
  print >> sys.stderr, "Usage: %s [command]" % argv[0]
  return 2
 return command_wrapper(argv[1:])

if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
