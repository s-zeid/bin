#!/usr/bin/env python3

import errno
import os
import subprocess
import sys
import time
import traceback


def return_prompt():
 sys.stdout.write("Press ^C to exit... ")
 sys.stdout.flush()
 try:
  while True:
   time.sleep(50)
 except KeyboardInterrupt:
  print()
 

def command_wrapper(argv):
 run_script = ""
 shell = True
 if (argv[0].endswith("geany_run_script.bat") or
     argv[:2] == ["-e", "/bin/sh ./geany_run_script.sh"]):
  if argv[0].endswith(".bat"):
   run_script = os.path.abspath(argv[0])
   shell = False
  else:
   run_script = os.path.abspath("./geany_run_script.sh")
  with open(run_script) as f:
   if argv[0].endswith(".bat"):
    argv = f.read().splitlines()[0]
   else:
    argv = f.read().splitlines()[4]
  try:
   os.remove(run_script)
  except:
   print("warning: could not remove %s" % run_script, file=sys.stderr)
   print("(%s)" % traceback.format_exc().splitlines()[-1], file=sys.stderr)
   print("===================================", file=sys.stderr)
 
 if isinstance(argv, (list, tuple)) and len(argv) > 1:
  shell = False
 
 try:
  r = subprocess.call(argv, shell=shell)
  print("==============================", file=sys.stderr)
  print("(process exited with code %s)" % r, file=sys.stderr)
  return_prompt()
  return r
 except SystemExit:
  pass
 except KeyboardInterrupt:
  print("\n======================", file=sys.stderr)
  print("(^C pressed)", file=sys.stderr)
  return 126
 except FileNotFoundError:
  print("No such file or directory: " + " ".join(argv), file=sys.stderr)
  return 127
 except OSError:
  print("\n==================================", file=sys.stderr)
  print(traceback.format_exc(), file=sys.stderr)
  print("==================================", file=sys.stderr)
  print("(Unhandled operating system error)", file=sys.stderr)
  return 127
 except:
  print("\n==================================", file=sys.stderr)
  print(traceback.format_exc(), file=sys.stderr)
  print("==================================", file=sys.stderr)
  print("(Unhandled Python error)", file=sys.stderr)
  return 127


def main(argv):
 if len(argv) < 2:
  print("Usage: %s [command]" % argv[0], file=sys.stderr)
  return 2
 return command_wrapper(argv[1:])


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
