#!/bin/sh

# BnayStream
# Transcode, resize, and stream over HTTP arbitrary video content.
# 
# Copyright (c) 2015 Scott Zeid.
# Released under the X11 License:  <https://tldrlegal.com/l/x11>
# 
# Requires FFmpeg and VLC (a command-line version of VLC is available as
# `vlc-core` in RPMFusion).  FFmpeg 2.4.7 or later and VLC 2.2.0 or later
# are recommended.
# 
# Example usage:
# 
#     $ livestreamer -p bnaystream twitch.tv/trihex source
# 
# Then access the stream via http://127.0.0.1:26290/
# (or also /bnaystream/ or /.bnaystream/ with the default settings).
# 
# An input file or URL supported by FFmpeg is given with the normal `-i`
# flag, except the `-i` may be omitted if the first argument to bnaystream
# that does not start with two hyphens either does not start with a hyphen
# or is only a hyphen (the latter case means to read from standard input).
# The other arguments are given to ffmpeg:  arguments that come before the
# input file or URL are applied to the input, and arguments that come after
# the input file or URL are applied to the output.
# 
# The listen address, port number, HTTP paths, and other settings can
# be changed in a ~/.bnaystreamrc file that follows a simple `name=value`
# syntax, one option per line.  Options may also be set at any point on
# the command line using the syntax `--<name>=<value>`.  (FFmpeg options
# always start with one hyphen.)  Options given on the command line take
# precedence over those given in the config file, and config options take
# precedence over FFmpeg arguments.  Valid option names and their default
# values may be found at the top of the script.


cache=1000

vcodec=libx264
vb=800k
vr=30
width=720
vfilter=

acodec=libmp3lame
ab=96k
ar=44100
volume=1.0
afilter=

mux=mpegts

mime=video/mpeg
host=127.0.0.1
port=26290
paths="
 /
 /bnaystream/
 /.bnaystream/
"

config_file=~/.bnaystreamrc


usage() {
  echo "Usage: bnaystream [--<bnaystream option name>=<value> [...]] \\"
  echo "                  [<ffmpeg input args> [...] -i] <input file or URL> \\"
  echo "                  [<ffmpeg output args> [...]]"
}


main() {
 if [ $# -lt 1 ]; then
  usage >&2
  return 2
 fi
 
 local transcode=1
 local resync_hack=0
 
 if [ -e "$config_file" ]; then
  eval `configbnay local < "$config_file"`
 fi
 
 # Filter the arguments list ($@) according to the comments in the if/elif/else
 # block.  The new value of $@ will be passed to FFmpeg.
 local set_cmd="set --"
 local have_dash_i=0
 local have_input=0
 local injected=0
 local arg=
 local i=1
 while [ $i -le $# ]; do
  eval "arg=\$$i"
  if (printf '%s' "$arg" | grep -q -e '^--.'); then
   # remove arguments that start with 2 hyphens and treat them as bnaystream
   # config options
   eval `printf '%s' "$arg" | head -n 1 | sed -e 's/^--//g' | configbnay local`
  elif [ $injected -eq 0 ]; then
   if (printf '%s' "$arg" | grep -q -v -e '^-.'); then
    # inject `-i` before the first non-config option argument if it doesn't
    # start with a hyphen or if it is only a hyphen
    set_cmd="$set_cmd -i \"\$$i\""
    have_dash_i=1
    have_input=1
   else
    # otherwise, pass to FFmpeg as-is
    set_cmd="$set_cmd \"\$$i\""
   fi
   injected=1
  else
   # other arguments are passed to FFmpeg as-is
   set_cmd="$set_cmd \"\$$i\""
  fi
  if [ $have_dash_i -ne 0 ]; then
   # keep track of whether we've seen `-i` followed by an appropriate value
   if (printf '%s' "$arg" | grep -q -v -e '^-.'); then
    have_input=1
   else
    have_dash_i=0
   fi
  fi
  if [ x"$arg" = x"-i" ]; then
   # keep track of whether we've seen `-i`
   have_dash_i=1
  fi
  i=$(($i + 1))
 done
 if [ $have_input -eq 0 ]; then
  # if we haven't seen an input argument, then we print usage and exit
  usage >&2
  return 2
 fi
 eval "$set_cmd"
 
 if [ x"$copy" != x"" ] && [ x"$copy" != x"0" ]; then
  transcode=0
 fi
 
 local dsts=""
 for i in $(strip_newlines `printf '%s' "$paths" | sed -e 's/,/ /g'`); do
  dsts="${dsts},dst=std{access=http{mime=$mime},mux=ffmpeg{mux=$mux},dst=$i}"
 done
 dsts=`printf '%s' "$dsts" | sed -e 's/^,//g'`
 
 local spec="$(strip_whitespace "
  #duplicate{
   $dsts
  }
 ")"
 
 # https://stackoverflow.com/a/20848224/4339587
 local fix_size=
 if [ x"$vcodec" = x"libx264" ]; then
  fix_size=',scale=trunc(iw/2)*2:trunc(ih/2)*2'
 fi
 
 if [ x"$vfilter" != x"" ]; then
  vfilter=",$vfilter"
 fi
 vfilter="scale=$width:-1$fix_size$vfilter"
 
 if [ x"$afilter" != x"" ]; then
  afilter=",$afilter"
 fi
 afilter="volume=$volume$afilter"
 
 if [ $transcode -ne 0 ]; then
  echo_run \
  ffmpeg `[ $resync_hack -ne 0 ] && printf '%s' "-resync_size 1048576" || true` \
         -max_delay 0 "$@" \
         -c:v "$vcodec" -b:v "$vb" -r:v "$vr" -filter:v "$vfilter" \
         -minrate "$vb" -maxrate "$vb" -bufsize 1835k \
         `[ x"$vcodec" = x"libx264" ] && printf '%s' "-profile:v baseline" || true` \
         `[ x"$vcodec" = x"libx264" ] && printf '%s' "-tune:v zerolatency" || true` \
         -c:a "$acodec" -b:a "$ab" -r:a "$ar" -filter:a "$afilter" \
         -f "$mux" -muxpreload 0 -muxdelay 0 - \
   | echo_run \
     cvlc - --file-caching="$cache" \
          --http-host "$host" --http-port="$port" --sout "$spec" vlc://quit
 else
  echo_run \
  ffmpeg `[ $resync_hack -ne 0 ] && printf '%s' "-resync_size 1048576" || true` \
         -max_delay 0 "$@" \
         -c:v copy -c:a copy \
         -f "$mux" -muxpreload 0 -muxdelay 0 - \
   | echo_run \
     cvlc - --file-caching="$cache" \
          --http-host "$host" --http-port="$port" --sout "$spec" vlc://quit
 fi
}


strip_whitespace() {
 printf '%s' `strip_newlines "$@"`
}


strip_newlines() {
 printf '%s ' `printf '%s ' "$@"`
}


echo_run() {
 echo '+' "$@" >&2
 "$@"
}


configbnay() {
 # Takes a config file from standard input and converts it into a shell
 # script that securely sets variables with the given names to their
 # respective values.  An optional prefix (e.g. "local") for each
 # assignment may be given as the first argument.
 # 
 # Config file lines are of the format `name=value` or just `name`, one
 # option per line.  In the former case, the option `name` is set to
 # `value`; in the latter case, the option `name` is treated as a boolean.
 # If the name starts with `no-` or `no_`, then that prefix is stripped and
 # the resulting name's value is set to 0; otherwise, the name is left
 # intact and its value is set to 1.  For non-boolean options, the equals
 # sign between the name and value may have spaces and/or tabs on either
 # side of it.
 # 
 # Option names that contain hyphens will have the hyphens replaced with
 # underscores.
 local prefix=
 if [ x"$1" != x"" ]; then
  prefix="$1 "
 fi
 local conf="`cat`"
 local re='^[ \t]\?\([a-zA-Z_-][a-zA-Z0-9_-]*\)[ \t]*\(=.*\)\?$'
 conf=`printf '%s' "$conf" \
        | sed -e 's/'"$re"'/\1\2/g' \
        | sed -e '/'"$re"'/p;d'`
 local OIFS=$IFS
 IFS='
'
 local name value value_esc
 for i in $conf; do
  name=`printf '%s' "$i" | sed -e 's/=.*$//g' | sed -e 's/-/_/g'`
  if (printf '%s' "$i" | grep -q -e '='); then
   value=`printf '%s' "$i" | sed -e 's/^[^=][^=]*=[ \t]*//g'`
  else
   if (printf '%s' "$name" | grep -q -e '^no_'); then
    name=`printf '%s' "$name" | sed -e 's/^no_//g'`
    value=0
   else
    value=1
   fi
  fi
  value_esc=\'`printf '%s' "$value" | sed -e "s/'/'\\\\\\''/g"`\'
  printf '%s' "$prefix$name=$value_esc;"; echo
 done
 IFS=$OIFS
}


main "$@"
