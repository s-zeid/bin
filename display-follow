#!/usr/bin/env python3

"""Causes an image to follow the cursor.
   
   Based on code from http://bit.ly/qfvule
   
"""

import argparse
import os
import sys
import time

import gi  # apt install python3-gi

gi.require_version("cairo", "1.0")  # apt install python3-gi-cairo
from gi.repository import cairo

gi.require_version("Gtk", "3.0")  # apt install gir1.2-gtk-3.0
from gi.repository import Gtk as gtk

gi.require_version("Gdk", "3.0")  # same Debian package as for GTK+ 3
from gi.repository import Gdk as gdk
from gi.repository import GdkPixbuf as gdk_pixbuf


class Point:
 __slots__ = ["x", "y", "width", "height", "original_x", "original_y"]
 def __init__(self, x, y=None, width=None, height=None):
  if not isinstance(x, (int, float, str)):
   raise TypeError("x must be a number or string")
  if not isinstance(y, (int, float, str)) and y != None:
   raise TypeError("y must be a number, string, or None")
  for arg, name in ((y, 'y'), (width, 'width'), (height, 'height')):
   if not isinstance(arg, (int, float)) and arg != None:
    raise TypeError(name + " must be a number or None")
  
  if isinstance(x, str) and "," in x:
   parts = [(i if i else 0) for i in x.lower().split(",")]
   if parts[0] in ("top", "bottom"):
    parts.reverse()
   if y != None:
    parts[1] = y
  else:
   parts = [x, y]
  parts = [(i.lower() if isinstance(i, str) else i) for i in parts]
  
  self.original_x = parts[0]
  self.original_y = parts[1]
  
  if parts[0] == "left":
   self.x = 0
  elif parts[0] == "right":
   if width == None:
    raise ValueError("width must be given when coordinates contain 'right'")
   self.x = width
  else:
   self.x = int(parts[0])
  if parts[1] == "top" or parts[1] == None:
   self.y = 0
  elif parts[1] == "bottom":
   if height == None:
    raise ValueError("height must be given when coordinates contain 'bottom'")
   self.y = height
  else:
   self.y = int(parts[1])
  
  self.width = width
  self.height = height


def _close_callback(window, data):
 """Called when the window is closed."""
 window.hide()
 gtk.main_quit()


def get_pointer_pos(gdk_window, gdk_device):
 pointer = gdk_window.get_device_position(gdk_device)
 return [pointer.x, pointer.y]


def make_transparent(window, cr):
 """Makes a window transparent."""
 cr.set_source_rgba(0, 0, 0, 0)
 cr.set_operator(cairo.Operator.SOURCE)
 cr.paint()
 cr.set_operator(cairo.Operator.OVER)


def display_follow(image_filename, size_factor=1, opacity=1, hotspot="top,left",
                   nearest=False):
 win = gtk.Window(type=gtk.WindowType.POPUP)
 win.set_title(os.path.basename(image_filename))
 win.set_position(gtk.WindowPosition.MOUSE)
 win.set_decorated(False)
 win.set_resizable(False)
 win.set_keep_above(True)
 # Set opacity to 0 until the window is moved for the first time
 gtk.Widget.set_opacity(win, 0)
 
 win.set_role("display-follow-" + str(time.time()))
 
 # Makes the window paintable, so we can draw directly on it
 win.set_app_paintable(True)
 
 # This sets the windows colormap, so it supports transparency.
 # This will only work if the wm support alpha channel
 screen = win.get_screen()
 rgba = screen.get_rgba_visual()
 win.set_visual(rgba)
 
 # This will actually make the window transparent.
 win.connect("draw", make_transparent)
 
 # Load and scale the image
 pixbuf = gdk_pixbuf.Pixbuf.new_from_file(image_filename)
 if size_factor != 1:
  pixbuf = pixbuf.scale_simple(
   int(round(pixbuf.get_width() * size_factor)),
   int(round(pixbuf.get_height() * size_factor)),
   gdk_pixbuf.InterpType.BILINEAR if not nearest else gdk_pixbuf.InterpType.NEAREST,
  )
 
 # Calculate the hotspot
 if isinstance(hotspot, Point):
  hotspot = Point(hotspot.original_x, hotspot.original_y,
                  pixbuf.get_width(), pixbuf.get_height())
 else:
  hotspot = Point(hotspot, width=pixbuf.get_width(), height=pixbuf.get_height())
 
 # Hey, I just met you
 # And this is crazy
 # But I'm a gtk.WINDOW_POPUP
 # So move me maybe?
 
 # Add the image
 img = gtk.Image.new_from_pixbuf(pixbuf)
 win.set_size_request(pixbuf.get_width(), pixbuf.get_height())
 win.add(img)
 
 # Show the window
 win.show_all()
 
 # Get pointer device
 pointer_device = gdk.Display.get_default().get_default_seat().get_pointer()
 
 # Move window for the first time
 root = gdk.get_default_root_window()
 pos = last = get_pointer_pos(root, pointer_device)
 win.get_window().raise_()
 gtk.Widget.set_opacity(win, opacity)
 win.get_window().move(pos[0] - hotspot.x + 1, pos[1] - hotspot.y + 1)
 gtk.main_iteration_do(False)
 
 # Make sure that the main loop terminates when the window is closed
 win.connect("delete-event", _close_callback)
 
 # Main loop
 try:
  while win.get_window() != None:
   gtk.main_iteration_do(False)
   time.sleep(.025)
   pos = get_pointer_pos(root, pointer_device)
   gtk.main_iteration_do(False)
   if pos != last:
    last = pos
    win.get_window().move(pos[0] - hotspot.x + 1, pos[1] - hotspot.y + 1)
    time.sleep(.025)
 except (KeyboardInterrupt, EOFError):
  win.close()


def main(argv):
 parser = argparse.ArgumentParser(
  prog=os.path.basename(argv[0]),
  description="Causes an image follow your cursor."
 )
 parser.add_argument("filename", help="The image to display")
 parser.add_argument("-s", "--size", type=float, default=100.,
                     help="Desired size of the image as a percentage")
 parser.add_argument("-n", "--nearest", action="store_true",
                     help="Use nearest neighbor sampling when scaling images"
                          " (results in a pixelated appearance when scaling up)")
 parser.add_argument("-o", "--opacity", type=float, default=100.,
                     help="Desired opacity of the image as a percentage")
 parser.add_argument("-H", "--hotspot", default="top,left",
                     help="Hotspot position ('x,y'; x and y can also be one of the"
                          " keywords top, right, bottom, left)")
 try:
  args = parser.parse_args(argv[1:])
 except SystemExit as exit:
  return exit.code
 
 display_follow(
  args.filename,
  size_factor=args.size * 0.01,
  opacity=args.opacity * 0.01,
  hotspot=args.hotspot,
  nearest=args.nearest,
 )


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except (KeyboardInterrupt, EOFError):
  pass
