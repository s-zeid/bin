#!/usr/bin/env python3

"""No Directory listing Http Daemon"""


import argparse
import collections
import functools
import http.server
import os
import re
import socket
import socketserver
import sys
import urllib.parse

from typing import *


DEFAULT_HOST = "127.0.0.1"
DEFAULT_PORT = 1404  # 14 = N, 04 = D

DEFAULT_ALLOW_RE = r"^.*$"
DEFAULT_DENY_RE = r"^$"
DEFAULT_FORBIDDEN_CODE = 403


def main(argv: List[str]) -> int:
 prog = os.path.basename(argv[0])
 doc_lines = (__doc__.strip() or "\n\n").splitlines()
 
 try:
  from setproctitle import setproctitle  # type: ignore  # pip3 install setproctitle; apt install python3-setproctitle
  setproctitle(f"{prog} {' '.join(argv[1:])}")
 except ImportError:
  pass
 
 p = argparse.ArgumentParser(
  prog=prog,
  description=doc_lines[0].strip(),
  epilog="\n".join(doc_lines[1:]).strip(),
  formatter_class=argparse.RawDescriptionHelpFormatter,
 )
 p.add_argument("-0", dest="host_all", action="store_true",
                help="listen on all IPv4 interfaces (shortcut for `-H 0.0.0.0`)")
 p.add_argument("-H", "--host", default=DEFAULT_HOST,
                help="listen on the given hostname or IP address"
                    f" (default: {DEFAULT_HOST})")
 p.add_argument("-p", "--port", default=DEFAULT_PORT, type=int,
                help="listen on the given TCP port number"
                    f" (default: {DEFAULT_PORT})")
 p.add_argument("-a", "--allow", default=DEFAULT_ALLOW_RE,
                help="only serve paths matching the given Python regular expression"
                     " (applies to the HTTP request path after URL-unquoting)"
                    f" (default: `{DEFAULT_ALLOW_RE}`)")
 p.add_argument("-d", "--deny", default=DEFAULT_DENY_RE,
                help="do not serve paths matching the given Python regular expression"
                     " (applies to the HTTP request path after URL-unquoting;"
                     "  takes precedence over -a/--allow)"
                    f" (default: `{DEFAULT_DENY_RE}`)")
 p.add_argument("-F", "--forbidden-code", default=DEFAULT_FORBIDDEN_CODE, type=int,
                help="the HTTP response code to use for disallowed requests"
                     " (default: {DEFAULT_FORBIDDEN_CODE})")
 p.add_argument("directory",
                help="the root directory from which to serve")
 p.add_argument("-v", "--verbose", action="count", default=0,
                help="show verbose output"
                     " (`-v`: log requests; `-vv`: also log server errors)")
 
 try:
  options = p.parse_args(argv[1:])
 except SystemExit as exc:
  return exc.code
 
 host = "0.0.0.0" if options.host_all else options.host
 host_is_all = re.search(r"^0+(\.0+){0,3}$", host)
 hostname = socket.gethostname() if host_is_all else options.host
 
 Handler = functools.partial(
  {
   0: TerseRequestHandler,
   1: LoggingRequestHandler,
  }.get(
   options.verbose,
   VerboseRequestHandler,
  ),
  directory=options.directory,
 )
 Server = VerboseTCPServer if options.verbose > 2 else TerseTCPServer
 
 with Server((host, options.port), Handler) as server:
  server.options = options
  print(f"Serving at <http://{hostname}:{options.port}/>...")
  server.serve_forever()
 
 return 0


class VerboseRequestHandler(http.server.SimpleHTTPRequestHandler):
 error_message_format = "<h1>%(code)d %(message)s</h1>%(explain)s"
 extensions_map: Dict[str, str]  # defined later
 
 def guess_type(self, path: Union[str, os.PathLike[str]]) -> str:
  if path == "/":
   return self.extensions_map.get(".html", "text/html")
  else:
   return super().guess_type(path)
 
 def check_allowed(self):
  fs_path = self.translate_path(self.path)
  unquoted_path = urllib.parse.unquote(self.path)
  
  allow = True
  if os.path.isdir(fs_path):
   allow = False
  elif re.search(self.server.options.deny, unquoted_path):
   allow = False
  elif not re.search(self.server.options.allow, unquoted_path):
   allow = False
  
  if not os.path.exists(fs_path):
   self.send_error(404, explain="")
  elif not allow:
   self.send_error(self.server.options.forbidden_code, explain="")
  
  return allow
 
 def do_GET(self):
  if self.check_allowed():
   super().do_GET()
 
 def send_header(self, name: str, value: str):
  if name.lower() != "server":
   super().send_header(name, value)


class LoggingRequestHandler(VerboseRequestHandler):
 def log_error(self, *args, **kwargs):
  pass


class TerseRequestHandler(LoggingRequestHandler):
 def log_request(self, *args, **kwargs):
  pass


class VerboseTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
 allow_reuse_address = True
 options: Any


class TerseTCPServer(VerboseTCPServer):
 def handle_error(self, *args, **kwargs):
  if not isinstance(sys.exc_info()[1], ConnectionResetError):
   super(socketserver.TCPServer, self).handle_error(*args, **kwargs)


_extensions_map = {
 "": "text/plain; charset=utf-8",
 ".aif": "audio/x-aiff",
 ".aifc": "audio/x-aiff",
 ".aiff": "audio/x-aiff",
 ".avci": "image/avci",
 ".avcs": "image/avcs",
 ".avif": "image/avif",
 ".avifs": "image/avif-sequence",
 ".bat": "text/plain",
 ".bin": "application/octet-stream",
 ".bmp": "image/x-ms-bmp",
 ".bz2": "application/x-bzip2",
 ".cab": "application/x-cab",
 ".com": "application/x-msdos-program",
 ".css": "text/css; charset=utf-8",
 ".dat": "application/octet-stream",
 ".dll": "application/x-msdos-program",
 ".exe": "application/x-msdos-program",
 ".flac": "audio/flac",
 ".flv": "video/x-flv",
 ".gif": "image/gif",
 ".gz": "application/gzip",
 ".heic": "image/heic",
 ".heics": "image/heic-sequence",
 ".heif": "image/heif",
 ".heifs": "image/heif-sequence",
 ".hta": "application/hta",
 ".htm": "text/html; charset=utf-8",
 ".html": "text/html; charset=utf-8",
 ".ico": "image/vnd.microsoft.icon",
 ".jpeg": "image/jpeg",
 ".jpe": "image/jpeg",
 ".jpg": "image/jpeg",
 ".js": "application/javascript; charset=utf-8",
 ".json": "application/json; charset=utf-8",
 ".m3u": "audio/mpegurl",
 ".m3u8": "audio/x-mpegURL",
 ".m4a": "audio/mpeg",
 ".md": "text/markdown; charset=utf-8",
 ".markdown": "text/markdown; charset=utf-8",
 ".mov": "video/quicktime",
 ".mpe": "video/mpeg",
 ".mpeg": "video/mpeg",
 ".mpg": "video/mpeg",
 ".mpga": "audio/mpeg",
 ".mpega": "audio/mpeg",
 ".mp2": "audio/mpeg",
 ".mp3": "audio/mpeg",
 ".mp4": "video/mp4",
 ".oga": "audio/ogg",
 ".ogg": "audio/ogg",
 ".opus": "audio/ogg",
 ".pdf": "application/pdf",
 ".pls": "audio/x-scpls",
 ".png": "image/png",
 ".py": "text/plain; charset=utf-8",
 ".sh": "text/plain; charset=utf-8",
 ".spl": "application/futuresplash",
 ".spx": "audio/ogg",
 ".svg": "image/svg+xml",
 ".svgz": "image/svg+xml",
 ".swf": "application/x-shockwave-flash",
 ".swfl": "application/x-shockwave-flash",
 ".tif": "image/tiff",
 ".tiff": "image/tiff",
 ".tar": "application/x-tar",
 ".tgz": "application/x-gtar-compressed",
 ".toml": "text/plain; charset=utf-8",
 ".ts": "video/mp2t",
 ".txt": "text/plain; charset=utf-8",
 ".wasm": "application/wasm",
 ".wav": "audio/x-wav",
 ".wbn": "application/webbundle",
 ".webm": "video/webm",
 ".webp": "image/webp",
 ".xht": "application/xhtml+xml; charset=utf-8",
 ".xhtml": "application/xhtml+xml; charset=utf-8",
 ".xml": "application/xml; charset=utf-8",
 ".xsd": "application/xml; charset=utf-8",
 ".xspf": "application/xspf+xml; charset=utf-8",
 ".xsl": "application/xslt+xml; charset=utf-8",
 ".xslt": "application/xslt+xml; charset=utf-8",
 ".xz": "application/x-xz",
 ".yaml": "text/plain; charset=utf-8",
 ".yml": "text/plain; charset=utf-8",
 ".zip": "application/zip",
}
 
extensions_map = (
 _extensions_map
 if sys.version_info >= (3, 9) else
 collections.defaultdict(lambda: _extensions_map[".txt"], _extensions_map)
)

VerboseRequestHandler.extensions_map = extensions_map


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
