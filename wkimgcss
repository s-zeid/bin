#!/usr/bin/env python3

"""Apply CSS to an image and output the result in PNG format.

The given CSS is applied to an `<img>` element using WebKitGTK.

Some fake "properties" are provided to provide functions either not provided by
or not intuitive enough to do with standard CSS; they are evaluated after the
rest of the CSS is applied and in the following order:

    --gamma: {rgb} [/ {weight}];  // unitless; initial: 1 / 1
    --gamma: {rgb} {a} [/ {weight}];  // unitless; initial: 1 1 / 1
    --gamma: {r} {g} {b} [/ {weight}];  // unitless; initial: 1 1 1 / 1
    --gamma: {r} {g} {b} {a} [/ {weight}];  // unitless; initial: 1 1 1 1 / 1

    --crop: {x} {y} {width} {height};  // any valid CSS length

Transparent images are supported for both input and output.

"""


import argparse
import atexit
import base64
import contextlib
import dataclasses
import io
import json
import math
import os
import re
import shutil
import signal
import subprocess
import sys
import time

from typing import *

if TYPE_CHECKING:
 # these are repeated here to preserve the installation instruction
 # comments in the tracebacks for the actual imports
 import gi, gi.repository  # type: ignore

import gi  # apt install python3-gi; apk add py3-gobject3

gi.require_version("Gtk", "3.0")  # apt install gir1.2-gtk-3.0; apk add gtk+3.0
from gi.repository import Gtk as gtk

gi.require_version("Gdk", "3.0")  # apt install gir1.2-gtk-3.0; apk add gtk+3.0
from gi.repository import Gdk as gdk

gi.require_version("WebKit2", "4.0")  # apt install gir1.2-webkit2-4.0; apk add webkit2gtk
from gi.repository import WebKit2 as webkit2

from gi.repository import GLib as glib
from gi.repository import Gio as gio
from gi.repository import GObject as gobject

import cairo  # apt install python3-cairo; apk add py3-cairo
gi.require_foreign("cairo", "Surface")

if not sys.platform.startswith("darwin") and not sys.platform.startswith("win32"):
 if not os.environ.get("WAYLAND_DISPLAY", os.environ.get("DISPLAY", "")):
  assert shutil.which("xvfb-run")  # apt install xvfb libgl1-mesa-dri; apk add xvfb-run mesa-dri-gallium


def main(argv: List[str]):
 prog = os.path.basename(argv[0])
 doc_lines = (__doc__.strip() or "\n\n").splitlines()
 
 p = argparse.ArgumentParser(
  prog=prog,
  description=doc_lines[0].strip(),
  epilog="\n".join(doc_lines[1:]).strip(),
  formatter_class=argparse.RawDescriptionHelpFormatter,
 )
 p.add_argument("input",
                help="the input image (`-` for standard input)")
 p.add_argument("style",
                help="the CSS fragment to apply to the image")
 p.add_argument("output",
                help="the PNG output path (`-` for standard output)")
 
 try:
  options = p.parse_args(argv[1:])
 except SystemExit as exc:
  return exc.code
 
 input_data: bytes
 if options.input == '-':
  input_data = sys.stdin.buffer.read()
 else:
  with open(options.input, "rb") as f:
   input_data = f.read()
 
 try:
  output_data = wkimgcss(input_data, options.style)
 except JSModuleError as exc:
  if exc.name == "EncodingError":
   print(
    f"{prog}: error: input image is corrupted or its format is not supported by WebKitGTK",
    file=sys.stderr,
   )
   return 1
  else:
   raise
 
 if options.output == "-":
  sys.stdout.buffer.write(output_data)
  sys.stdout.buffer.flush()
 else:
  with open(options.output, "wb") as f:
   f.write(output_data)
 
 return 0


def wkimgcss(
 input_data: bytes,
 style: str,
):
 with xvfb_context():
  main_context = glib.MainContext.default()
  window = gobject.new(gtk.Window)
  
  os.environ["WEBKIT_A11Y_BUS_ADDRESS"] = ""
  ctx = webkit2.WebContext.new_ephemeral()
  wv = webkit2.WebView.new_with_context(ctx)
  settings = webkit2.Settings()
  wv.set_settings(settings)
  settings.set_enable_developer_extras(True)
  if gtk.get_major_version() >= 4:
   window.set_child(wv)
  else:
   window.add(wv)
  wv.show()
  #window.show()
  
  geometry_js = wv_run_js_module_on_empty_page(
   webview=wv,
   js=r"""
    async function main() {
     const img = document.createElement("img");
     img.setAttribute("src", `data:image/png;base64,${params.input_data_b64}`);
     await img.decode();
     const canvas = document.createElement("canvas");
     canvas.width = img.naturalWidth;
     canvas.height = img.naturalHeight;
     const ctx = canvas.getContext("2d");
     ctx.drawImage(img, 0, 0);
     canvas.setAttribute("style", params.style);
     document.body.append(canvas);
     document.body.style = `
      position: relative; top: 0; left: 0;
      margin: 0;
     `;
     
     const rect = canvas.getBoundingClientRect();
     let { x, y, width, height } = rect;
     
     // adjust for negative and/or fractional positions
     let x_abs = Math.abs(x), y_abs = Math.abs(y);
     let x_offset = 0, y_offset = 0;
     if (x < 0) {
      x_offset += -x;
     }
     if (Math.floor(x_abs) != x_abs) {
      x_offset += 1 - (x - Math.floor(x_abs));
     }
     if (y < 0) {
      y_offset += -y;
     }
     if (Math.floor(y_abs) != y_abs) {
      y_offset += 1 - (y - Math.floor(y_abs))
     }
     x += x_offset;
     y += y_offset;
     document.body.style.left = `${x_offset}px`;
     document.body.style.top = `${y_offset}px`;
     
     // apply `--gamma` if given
     const gamma_string = canvas.style.getPropertyValue("--gamma");
     const gamma_string_parts = splitCSSValue(gamma_string, "/");
     const gamma_rgba = [1, 1, 1, 1];
     if (gamma_string_parts.length >= 1 && gamma_string_parts.length <= 2) {
      const gamma_parts = splitCSSValue(gamma_string_parts[0].trim());
      let gamma_weight = (gamma_string_parts[1] || "").trim() || 1;
      if (gamma_parts.length >= 0 && gamma_parts.length <= 4) {
       gamma_weight = clamp(parseCSSUnitlessNumber(gamma_weight, 1), 0, 1);
       if (gamma_weight != null) {
        for (let i = 0; i < gamma_parts.length; i++) {
         gamma_parts[i] = clamp(parseCSSUnitlessNumber(gamma_parts[i].trim(), 1), 0, Infinity);
        }
        switch (gamma_parts.length) {
         case 1:
          gamma_rgba[0] = gamma_rgba[1] = gamma_rgba[2] = gamma_parts[0];
          break;
         case 2:
          gamma_rgba[0] = gamma_rgba[1] = gamma_rgba[2] = gamma_parts[0];
          gamma_rgba[3] = gamma_parts[1];
          break;
         case 3:
          gamma_rgba[0] = gamma_parts[0];
          gamma_rgba[1] = gamma_parts[1];
          gamma_rgba[2] = gamma_parts[2];
          break;
         case 4:
          gamma_rgba[0] = gamma_parts[0];
          gamma_rgba[1] = gamma_parts[1];
          gamma_rgba[2] = gamma_parts[2];
          gamma_rgba[3] = gamma_parts[3];
          break;
        }
        if (gamma_rgba[0] != 1 || gamma_rgba[1] != 1 || gamma_rgba[2] != 1 || gamma_rgba[3] != 1) {
         const luts = new Array(4);
         for (let i = 0; i < luts.length; i++) {
          const lut = luts[i] = new Float64Array(256);
          const [gamma, weight] = [gamma_rgba[i], gamma_weight];
          for (let i = 0; i <= 255; i++) {
           let v = i / 255;
           if (v <= 0) {
            lut[i] = 0;
            continue;
           }
           v = v * (1 - weight) + Math.pow(v, gamma) * weight;
           lut[i] = (v >= 1) ? 255 : 255 * v;
          }
         }
         const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
         const data = imageData.data
         for (let pixel = 0; pixel < data.length; pixel += 4) {
          for (let subpixel = 0; subpixel < 4; subpixel++) {
           data[pixel + subpixel] = luts[subpixel][data[pixel + subpixel]];
          }
         }
         ctx.putImageData(imageData, 0, 0);
        }
       }
      }
     }
     
     // apply `--crop` if given
     const crop_string = canvas.style.getPropertyValue("--crop");
     const crop_parts = splitCSSValue(crop_string);
     if (crop_parts.length == 4) {
      let [crop_x, crop_y, crop_width, crop_height] = crop_parts;
      crop_x = clamp(parseCSSLength(crop_x, 0), 0,  width);
      crop_y = clamp(parseCSSLength(crop_y, 0), 0, height);
      crop_width = clamp(parseCSSLength(crop_width, width - crop_x), 0, width - crop_x);
      crop_height = clamp(parseCSSLength(crop_height, height - crop_y), 0, height - crop_y);
      x += crop_x;
      y += crop_y;
      width = crop_width;
      height = crop_height;
     }
     
     return [x, y, width, height];
    }
    
    function clamp(n, min, max) {
     return Math.max(min, Math.min(n, max));
    }
    
    function computeCSSValue(property, value, parentValue) {
     const haveParentValue = typeof parentValue != "undefined";
     value = (value == null) ? "" : String(value);
     parentValue = (parentValue == null) ? "" : String(parentValue);
     const parent = document.createElement("div");
     const test = document.createElement("div");
     if (haveParentValue) {
      parent.style.setProperty(property, parentValue, "important");
     }
     test.style.setProperty(property, value);
     parent.append(test);
     document.body.append(parent);
     const result = window.getComputedStyle(test).getPropertyValue(property);
     parent.remove();
     return result;
    }
    
    function parseCSSLength(length, default_) {
     if (length != null && length != "") {
      length = String(length).trim();
      if (CSS.supports("margin-left", length)) {
       const computed = computeCSSValue("margin-left", length).match(/^(-?[0-9]*(\.[0-9]+)?|-?[0-9]+)px$/);
       if (computed) {
        return new Number(computed[1]);
       }
      }
     }
     return (typeof default_ == "undefined") ? NaN : default_;
    }
    
    function parseCSSUnitlessNumber(number, default_) {
     if (number != null && number != "") {
      number = String(number).trim();
      const px = `calc(1px * ${number})`;
      if (CSS.supports("margin-left", px)) {
       const computed = computeCSSValue("margin-left", px).match(/^(-?[0-9]*(\.[0-9]+)?)px$/);
       if (computed) {
        return Number(computed[1]);
       }
      }
     }
     return (typeof default_ == "undefined") ? NaN : default_;
    }
    
    function splitCSSValue(s, sep) {
     // This does not properly support separators that are sigils,
     // i.e. `#`, `+`, `-`, `.`, `<`, `@`, or `\`.  Splitting on
     // those characters may result in invalid or corrupted output.
     // See <https://www.w3.org/TR/css-syntax/#consume-token>.
     s = s.trim();
     sep = sep || " \t\n\r\f";
     let result = [];
     let sepIsWhitespace = (sep.trim() == "");
     let commentLevel = 0, dQuoteLevel = 0, sQuoteLevel = 0, parenLevel = 0;
     let item = "";
     let haveItem = !sepIsWhitespace;
     for (let i = 0; i < s.length; i++) {
      const ch = s[i];
      if (commentLevel == 0) {
       if (ch == '"' && sQuoteLevel == 0) {
        if (dQuoteLevel == 1 && s[i - 1] != '\\') {
         dQuoteLevel = 0;
        } else {
         dQuoteLevel = Math.min(dQuoteLevel + 1, 1);
        }
       }
       if (ch == '\'' && dQuoteLevel == 0) {
        if (sQuoteLevel == 1 && s[i - 1] != '\\') {
         sQuoteLevel = 0;
        } else {
         sQuoteLevel = Math.min(sQuoteLevel + 1, 1);
        }
       }
      }
      if (dQuoteLevel == 0 && sQuoteLevel == 0) {
       if (ch == '/' && s[i + 1] == '*' && commentLevel == 0) {
        commentLevel += 1;
       }
       if (ch == '*' && s[i + 1] == '/' && commentLevel == 1) {
        commentLevel -= 1;
       }
       if (commentLevel == 0) {
        if (ch == '(') {
         parenLevel += 1;
        }
        if (ch == ')' && parenLevel > 0) {
         parenLevel -= 1;
        }
       }
      }
      const levelSum = commentLevel + dQuoteLevel + sQuoteLevel + parenLevel;
      let isSep = sep.includes(ch) && levelSum == 0;
      let isEnd = i + 1 == s.length;
      if (!isSep) {
       haveItem = true;
       item += ch;
      }
      if ((isSep || isEnd) && haveItem) {
       result.push(item.trim());
       item = "";
       haveItem = !sepIsWhitespace;
       continue;
      }
     }
     return result;
    }
    
    return await main();
   """,
   params={
    "input_data_b64": base64.b64encode(input_data).decode("utf-8"),
    "style": style,
   },
  )
   
  try:
   if not isinstance(geometry_js, list):
    raise TypeError(str(type(geometry_js)))
   if len(geometry_js) != 4:
    raise ValueError()
   for i in geometry_js:
    if not isinstance(i, (int, float)):
     raise TypeError(str(type(i)))
  except (TypeError, ValueError) as exc:
   raise RuntimeError("BUG: JavaScript return value is not an array of 4 Numbers")
  geometry: List[Union[int, float]] = geometry_js
  x, y, width, height = geometry
  
  cairo_surface = None
  
  def snapshot_finished_cb(_object, result, _user_data=None):
   nonlocal cairo_surface
   cairo_surface = wv.get_snapshot_finish(result)
   
  wv.get_snapshot(
   webkit2.SnapshotRegion.FULL_DOCUMENT,
   webkit2.SnapshotOptions.TRANSPARENT_BACKGROUND,
   None,  # cancellable
   snapshot_finished_cb,
   None,  # user_data
  )
  
  while cairo_surface is None:
   main_context.iteration(False)
  
  cairo_surface_cropped = cairo_surface.map_to_image(
   cairo.RectangleInt(math.floor(x), math.floor(y), math.ceil(width), math.ceil(height)),
  )
  
  buffer = io.BytesIO()
  cairo_surface_cropped.write_to_png(buffer)
  output_data = buffer.getvalue()
  
  window.hide()
  if gtk.get_major_version() >= 4:
   window.set_child(None)
  else:
   window.remove(wv)
  window.destroy()
  
  return output_data


@dataclasses.dataclass
class JSModuleError(Exception):
 name: Optional[str]
 message: Optional[str]
 line: Optional[int]
 column: Optional[int]
 def __str__(self):
  position = ", ".join([str(i) for i in [
   f"line {self.line}" if self.line is not None else None,
   f"column {self.column}" if self.column is not None else None,
  ] if i])
  result = ": ".join([i for i in [
   position,
   self.message,
  ] if i])
  return result


def wv_run_js_module_on_empty_page(
 webview: webkit2.WebView,  # type: ignore
 js: str,
 params: Optional[dict],
 timeout_s: Union[int, float] = 10
) -> Any:
 main_context = glib.MainContext.default()
 
 params_json = json.dumps(params or {})
 result = None
 have_result = False
 result_success = False
 
 ucm = webview.get_user_content_manager() 
 
 def result_cb(_object, message_event, _user_data=None):
  nonlocal result
  nonlocal have_result
  nonlocal result_success
  try:
   if have_result:
    return
   js_result = message_event
   jsc_value = js_result.get_js_value()
   if jsc_value.is_array():
    array = json.loads(jsc_value.to_json(0))
    success, error_meta, body = array
    result_success = success
    error_name, error_line, error_column = error_meta
    jsc_exception = jsc_value.get_context().get_exception()
    if jsc_exception:
     raise JSModuleError(error_name, jsc_exception.get_message(), error_line, error_column)
    if not success:
     raise JSModuleError(error_name, str(body), error_line, error_column)
    result = body
   else:
    raise TypeError("BUG: JavaScript wrapper return value is not an array")
  except Exception as exc:
   result = exc
  finally:
   have_result = True
 
 message_handler_name = "__wv_run_js_module__result"
 ucm.register_script_message_handler(message_handler_name)
 signal_handler_id = ucm.connect(
  "script-message-received::" + message_handler_name,
  result_cb,
 )
 
 try:
  html_1 = r"""
   <!DOCTYPE html>
   <meta charset="utf-8" />
   <body>
   <script type="module">
    window.addEventListener("error", (event) => {
     const errorMeta = [event.error.name || null, (event.lineno - ___line_offset___), event.colno];
     window.webkit.messageHandlers.""" + message_handler_name + r""".postMessage([false, errorMeta, event.error.toString()]);
    });
   </script>
   <script type="module">
    const params = """ + params_json + r""";
    const result = await (async function() {
     try {
  """.rstrip(" \t")
  html_2 = r"""
     } catch (error) {
      const errorMeta = [error.name || null, (error.lineNumber - ___line_offset___), error.columnNumber];
      window.webkit.messageHandlers.""" + message_handler_name + r""".postMessage([false, errorMeta, error.toString()]);
     }
    })();
    window.webkit.messageHandlers.""" + message_handler_name + r""".postMessage([true, [null, null, null], result]);
   </script>
  """
  line_offset = len(html_1.splitlines())
  html_1 = html_1.replace("___line_offset___", json.dumps(line_offset))
  html_2 = html_2.replace("___line_offset___", json.dumps(line_offset))
  html = html_1 + js + html_2
  webview.load_html(html, None)
  
  start = time.time()
  while not have_result:
   main_context.iteration(False)
   if timeout_s > 0 and time.time() - start >= timeout_s:
    raise JSModuleError(
     None,
     f"script did not execute in time (timeout: {timeout_s} seconds)",
     None,
     None,
    )
 finally: 
  ucm.disconnect(signal_handler_id)
  ucm.unregister_script_message_handler(message_handler_name)
 
 if result_success:
  return result
 else:
  raise result  # type: ignore


@contextlib.contextmanager
def xvfb_context():
 use_xvfb = False
 if not sys.platform.startswith("darwin") and not sys.platform.startswith("win32"):
  if not os.environ.get("WAYLAND_DISPLAY", os.environ.get("DISPLAY", "")):
   use_xvfb = True
 if use_xvfb:
  # xvfb-run configures authentication and finds a free display number,
  # so we don't have to do those manually
  process = subprocess.Popen(
   ["xvfb-run", "-a", "sh", "-c", 'printf "%s\\n" "$$" "$DISPLAY" "$XAUTHORITY" && cat'],
   stdin=subprocess.PIPE,
   stdout=subprocess.PIPE,
  )
  pid = int(process.stdout.readline().rstrip(b"\r\n").decode("utf-8"))
  display = process.stdout.readline().rstrip(b"\r\n").decode("utf-8")
  xauthority = process.stdout.readline().rstrip(b"\r\n").decode("utf-8")
  os.environ["DISPLAY"] = display
  os.environ["XAUTHORITY"] = xauthority
  def terminate():
   os.kill(pid, signal.SIGINT)  # xvfb-run doesn't clean up properly on signals
  atexit.register(terminate)
  # set default display for Gdk
  # GTK windows should be created with `gobject.new(gtk.Window)`, or else the
  # overriden __init__ will fail as if we hadn't set the default display
  gdisplaymanager = gdk.DisplayManager.get()
  gdisplay = gdisplaymanager.open_display(display)
  gdisplaymanager.set_default_display(gdisplay)
 try:
  yield use_xvfb
 finally:
  if use_xvfb:
   atexit.unregister(terminate)
   terminate()


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
