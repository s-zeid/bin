#!/usr/bin/env python3

import argparse
import decimal
import os
import socket
import socketserver
import sys

from collections import OrderedDict
from typing import *


POWER_SUPPLY_ROOT = "/sys/class/power_supply"
DEFAULT_HOST = "127.0.0.1"
DEFAULT_PORT = 33579


def main(argv: List[str]) -> int:
 p = argparse.ArgumentParser(description="Display or serve power status.")
 p.add_argument("--daemon", "-d", dest="daemon", action="store_true",
                help="run as a daemon")
 fg = p.add_argument_group("optional field arguments",
                           "If more than one field name is given, each field"
                           " will be printed on a separate line, and each line"
                           " will be prefixed with the name of the field and an"
                           " equals sign.  Fields will be printed in the order"
                           " given.  If no field names are given, then only the"
                           " `human` field will be shown.")
 fields = Power._attr_docs
 for k in fields:
  fg.add_argument("--" + k.replace("_", "-"), dest="only_fields", 
                 action="append_const", const=k,
                 help="show " + fields[k])
 fg.add_argument("--all", "-a", dest="all_fields", action="store_true",
                 help="show all fields")
 p.add_argument("--hep", dest="_hep_easter_egg", action="store_true",
                help=argparse.SUPPRESS)
 p.add_argument("hostport", nargs="?", default="",
                help="the host and port number to connect or bind to"
                     " (defaults to %s:%d)" % (DEFAULT_HOST, DEFAULT_PORT))
 
 # Make it say "[host][:port]" for hostport in the help and usage text
 # Trying to do it with metavar causes an AssertionError
 def fixup(s):
  s = s.replace("[hostport]", "hostport")
  s = s.replace("hostport     ", "hostport")
  s = s.replace("hostport", "[host][:port]")
  return s
 __format_help = p.format_help
 p.format_help = lambda: fixup(__format_help())  # type: ignore
 __format_usage = p.format_usage
 p.format_usage = lambda: fixup(__format_usage())  # type: ignore
 
 try:
  args = p.parse_args(argv[1:])
 except SystemExit as exc:
  return exc.code
 
 host = port = root = None
 hostport = args.hostport
 if ":" not in hostport:
  hostport += ":"
 host, port = hostport.split(":")
 port = int(port) if port else None
 
 if args._hep_easter_egg:
  print("Hep!  Hep!  I'm covered in sawlder! ... Eh?  Nobody comes.")
  print("--Red Green, https://www.youtube.com/watch?v=qVeQWtVzkAQ#t=6m27s")
  return 0
 
 elif args.daemon:
  # TODO: background
  PowerServer(host=host, port=int(port) if port else None).daemon()
  return 0
 
 else:
  if host or port:
   power = Power.remote(host=host, port=port)
  else:
   power = Power.local(root=root)
  
  if args.all_fields:
   print(power.format())
  else:
   only_fields = args.only_fields or ["human"]
   for k in only_fields:
    out = ""
    if len(only_fields) != 1:
     out += k + "="
    out += str(getattr(power, k))
    print(out)
  
  return 0


class PowerServer:
 class Handler(socketserver.BaseRequestHandler):
  def handle(self):
   self.request.send(Power.local().format().encode("utf-8") + b"\n")
   self.request.shutdown(socket.SHUT_RDWR)
   self.request.close()
 
 class TCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
  allow_reuse_address = True
 
 def __init__(self, host: str = None, port: int = None):
  self.server = self.TCPServer((host or DEFAULT_HOST, port or DEFAULT_PORT), self.Handler)
 
 def daemon(self):
  try:
   self.server.serve_forever()
  finally:
   self.server.shutdown()


class DocumentedAttributes(type):
 # this metaclass is public domain where possible, or licensed under CC0
 """A metaclass that allows attributes to be documented.

Attribute values in the class body are transformed as follows:

* `str`: removed; becomes the attribute's documentation
* `tuple`: first item is the attribute's value; second item is its documentation
* `other`: left unchanged

Attribute documentation is available as a `<class>._attr_docs` dictionary.

If type annotations are used, a `# type: ignore` comment should be added to
the same line as the type annotation.  Mypy will still check accesses to/from
such attributes.
"""
 _attr_docs: Dict[str, str]
 def __new__(cls, name: str, bases: tuple, attrs: dict):
  orig_attrs, attrs, docs = attrs, {}, {}
  for attr, value in orig_attrs.items():
   if not (attr[:2] == attr[-2:] == "__") and isinstance(value, (str, tuple)):
    if isinstance(value, tuple):
     attrs[attr], docs[attr] = value
    else:
     docs[attr] = value
   else:
    attrs[attr] = value
  attrs["_attr_docs"] = docs
  return super().__new__(cls, name, bases, attrs)


class Power(metaclass=DocumentedAttributes):
 human: str         = "human-readable status"  # type: ignore
 supply: str        = "the power supply source"  # type: ignore
 status: str        = "the general state of the power supply"  # type: ignore
 percent: int       = (None, "the percentage of power available")  # type: ignore
 remaining: str     = (None, "how much time is remaining to charge"  # type: ignore
                             " or discharge in H:MM:SS format")
 hours: int         = (None, "the hours component of the time remaining")  # type: ignore
 minutes: int       = (None, "the minutes component of the time remaining")  # type: ignore
 seconds: int       = (None, "the seconds component of the time remaining")  # type: ignore
 total_seconds: int = (None, "how much time is remaining in seconds")  # type: ignore
 
 def to_dict(self) -> dict:
  result = {}
  for attr in self.__class__._attr_docs:
   result[attr] = getattr(self, attr)
  return result

 def format(self) -> str:
  return "\n".join(["%s=%s" % (k, v) for k, v in self.to_dict().items()])
 
 @classmethod
 def remote(cls, host: str = None, port: int = None) -> "Power":
  s = ""
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  try:
   sock.connect((host or DEFAULT_HOST, port or DEFAULT_PORT))
   while True:
    data = sock.recv(1024)
    if not data:
     break
    s += data.decode("utf-8")
  finally:
   sock.close()
  
  result = cls()
  for line in s.splitlines():
   attr, value = line.split("=")
   setattr(result, attr, value)
  return result
 
 @classmethod
 def local(cls, root: str = None) -> "Power":
  result = cls()
  
  power_supplies = sorted(os.listdir(root or POWER_SUPPLY_ROOT))
  ac = None
  battery = None
  for i in power_supplies:
   type_ = get_sysfs(i, "type").lower()
   if type_ == "mains" and ac is None:
    ac = i
   elif type_ == "battery" and battery is None:
    battery = i
   if ac and battery:
    break
  
  battery_status = ""
  if ac is None and battery is None:
   result.supply = result.status = "Unknown"
  else:
   current_now = float(get_sysfs(battery, "current_now") or 0)
   charge_now  = float(get_sysfs(battery, "charge_now") or 0)
   charge_full = float(get_sysfs(battery, "charge_full") or 0)
   capacity    = float(get_sysfs(battery, "capacity") or 0)
   if capacity:
    result.percent = round_half_up(capacity)
   elif charge_full > 0:
    result.percent = round_half_up(charge_now / charge_full) * 100
   
   battery_status = get_sysfs(battery, "status").lower()
   if battery_status in ("discharging", "charging"):
    if current_now > 0:
     top = charge_full - charge_now if battery_status == "charging" else charge_now
     result.total_seconds = round_half_up(3600 * top / current_now)
     result.hours         = round_half_up(result.total_seconds / 3600)
     result.minutes       = round_half_up(result.total_seconds / 60) % 60
     result.seconds       = round_half_up(result.total_seconds % 60)
     result.remaining     = "%02d:%02d" % (result.minutes, result.seconds)
     if result.hours:
      result.remaining    = str(result.hours) + ":" + result.remaining
   if battery_status == "discharging":
    result.supply = "Battery"
    result.status = "Discharging"
   elif get_sysfs(ac, "online") == "1":
    result.supply = "AC Adapter"
    if battery_status != "":
     if result.percent < 100 or battery_status == "charging":
      result.status = "Charging"
     else:
      result.status = "Charged"
    else:
     result.status = "Plugged in"
  
  if battery_status != "":
   if result.status.lower() == "charged":
    result.human = result.status
   elif result.remaining is not None:
    time_type = "until charged" if result.status.lower() == "charging" else "remaining"
    result.human = "%s, %s%%, %s %s" % (result.status, result.percent,
                                        result.remaining, time_type)
   else:
    result.human = "%s, %s%%" % (result.status, result.percent)
  else:
   result.human = result.status
  
  result.to_dict()  # check that all attributes are defined
  return result


def get_sysfs(supply: Optional[str], field: Optional[str], root: str = None) -> str:
 path = os.path.join(root or POWER_SUPPLY_ROOT, supply or "", field or "")
 if os.path.exists(path):
  with open(path, "rb") as f:
   return f.read().decode("utf-8").strip()
 return ""


def round_half_up(n: Union[int, float, decimal.Decimal]) -> int:
 return int(decimal.Decimal(n).quantize(1, rounding=decimal.ROUND_HALF_UP))


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
