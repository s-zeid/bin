#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set fdm=marker:

"""Runs a Java class file.

This is a clean room reimplementation of the javawrapper from the Linux Kernel
documentation (in java.txt), which can be used with binfmt_misc to directly
execute a Java class file, as described further in java.txt.

Unlike the javawrapper in java.txt, this does not require a binary helper to
be compiled in order to read the class name.  Instead, the code that reads
the Java class file is included right here.

Copyright (c) 2013 Scott Zeid.  Released under the X11 License.

"""

import codecs
import os
import re
import struct
import subprocess
import sys

from collections import namedtuple

class JavaWrapperError(StandardError): pass

def main(argv):
 if len(argv) != 2:
  print >> sys.stderr, "Usage: %s file.class" % argv[0]
  return 2
 
 try:
  run_class_file(argv[1], argv[2:], True)
 except JavaWrapperError as exc:
  print >> sys.stderr, "error:", exc
  return 1

def get_classpath(filename):
 if isinstance(filename, unicode):
  filename = filename.encode(getfilesystemencoding())
 
 fqname = get_class_name(filename).encode(getfilesystemencoding()).strip("/")
 fqpath, fqbase = os.path.split(os.path.normpath(fqname))
 
 # try to resolve symlink if file basename is not "{fqbase}.class"
 # one level at a time
 depth = 0
 while os.path.basename(filename) != fqbase + ".class" and os.path.islink(filename):
  filename = os.path.join(os.path.dirname(filename), os.readlink(filename))
  depth += 1
  if depth > 5: raise JavaWrapperError("Symbolic link depth is too deep")
 
 # now get the directory to use in $CLASSPATH, and also check to see that
 # the directory tree is valid (if the class is part of a package)
 for path in [os.path.abspath(os.path.dirname(filename)),
              os.path.realpath(os.path.dirname(filename))]:
  if path.endswith(fqpath):
   return path.rsplit(fqpath)[0] if fqpath else path
 raise JavaWrapperError("%s should be in a path ending with %s"
                         % (filename, fqpath))

def run_class_file(filename, args=[], exec_=False, **subprocess_kwargs):
 classpath = get_classpath(filename)
 environ = os.environ.copy()
 if "CLASSPATH" in environ:
  if not re.search(r"(^|%s)(%s)(:|$)" % (os.path.pathsep, re.escape(classpath)),
                   environ["CLASSPATH"], re.MULTILINE):
   environ["CLASSPATH"] = classpath + ":" + environ["CLASSPATH"]
 else:
  environ["CLASSPATH"] = classpath
 
 argv = ["java", get_class_name(filename)] + args
 if exec_:
  os.execvpe(argv[0], argv, environ)
 else:
  return subprocess.Popen(argv, env=environ, **subprocess_kwargs)

def getfilesystemencoding():
 """Returns the file system encoding, but substitutes UTF-8 for ASCII."""
 enc = sys.getfilesystemencoding()
 try:
  if codecs.lookup(enc).name.lower() == "ascii":
   return "utf-8"
 except LookupError:
  return "utf-8"
 return enc

### Java class name reading {{{1

Tag = namedtuple("Tag", "n,size,name")
TagData = namedtuple("TagData", "i,tag,size,data")
Version = namedtuple("Version", "major,minor")

class Tag(Tag):
 def __repr__(self):    return self.name
 def __str__(self):     return repr(self)
 def __unicode__(self): return repr(self)

# Negative sizes indicate a -n-byte size prefix,
# with the total size being  value of prefix + 2.
TAGS = {
 1:  Tag(1,  -2, "UTF8"),
 3:  Tag(3,  4,  "INTEGER"),
 4:  Tag(4,  4,  "FLOAT"),
 5:  Tag(5,  8,  "LONG"),
 6:  Tag(6,  8,  "DOUBLE"),
 7:  Tag(7,  2,  "CLASS_REFERENCE"),
 8:  Tag(8,  2,  "STRING_REFERENCE"),
 9:  Tag(9,  4,  "FIELD_REFERENCE"),
 10: Tag(10, 4,  "METHOD_REFERENCE"),
 11: Tag(11, 4,  "INTERFACE_METHOD_REFERENCE"),
 12: Tag(12, 4,  "NAME_AND_TYPE_DESCRIPTOR")
}
for n in TAGS.keys(): TAGS[TAGS[n].name] = TAGS[n]
FORMATS = {None: '', 2: '>H', 4: '>I', 8: '>Q'}

def read_tag(fo, i):
 n = struct.unpack("B", fo.read(1))[0]
 try:
  tag = TAGS[n]
 except KeyError:
  raise ValueError("%d is not a valid tag" % n)
 size = tag.size
 if size < 0:
  prefix = -size
  size = struct.unpack(FORMATS[prefix], fo.read(prefix))[0]
  data = fo.read(size)
  return TagData(i, tag, prefix + size, data)
 return TagData(i, tag, size, struct.unpack(FORMATS[size], fo.read(size))[0])

def get_class_name(filename):
 with open(filename, "rb") as fo:
  magic = struct.unpack(">I", fo.read(4))[0]
  if magic != 0xCafeBabe:  # obligatory Emily reference... ಠ_ಠ
   raise ValueError("'%s' is not a valid Java class file" % filename)
  version = Version(minor=struct.unpack(">H", fo.read(2)),
                    major=struct.unpack(">H", fo.read(2)))
  cp = [None]
  cp_count = struct.unpack(">H", fo.read(2))[0]
  i = 1
  while i < cp_count:
   tag_data = read_tag(fo, i)
   cp += [tag_data]
   i += 1
  fo.seek(2, os.SEEK_CUR)
  this_class_i = struct.unpack(">H", fo.read(2))[0]
  this_class = cp[this_class_i]
  class_name = cp[this_class.data]
  return class_name.data

def print_cp(cp):
 for i in range(len(cp)):
  if i != 0:
   if cp[i]:
    print "%d: [%d] %s" % (i, cp[i].tag.n, cp[i].data)
   else:
    print "%d: None" % i

if __name__ == "__main__":  #{{{1
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
