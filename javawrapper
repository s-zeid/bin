#!/usr/bin/env python3
# vim: set fdm=marker:

"""Runs a Java class file.

This is a clean room reimplementation of the javawrapper from the Linux Kernel
documentation (in java.txt), which can be used with binfmt_misc to directly
execute a Java class file, as described further in java.txt.

Unlike the javawrapper in java.txt, this does not require a binary helper to
be compiled in order to read the class name.  Instead, the code that reads
the Java class file is included right here.

Copyright (c) 2013, 2023 Scott Zeid.  Released under the X11 License.

"""

# imports  #{{{1

import codecs
import os
import posixpath
import re
import shutil
import struct
import subprocess
import sys
import tempfile

from collections import namedtuple


class JavaWrapperError(RuntimeError):
 pass


def main(argv):  #{{{1
 prog = os.path.basename(argv[0])
 
 if len(argv) < 2:
  print("Usage: %s file.class" % prog, file=sys.stderr)
  return 2
 
 try:
  run_class_file(argv[1], argv[2:], True)
 except JavaWrapperError as exc:
  print(f"{prog}: error:", exc, file=sys.stderr)
  return 1


def split_class_name(class_name, sep=b"."):  #{{{1
 if isinstance(class_name, str):
  class_name = class_name.encode(getfilesystemencoding())
 if isinstance(sep, str):
  sep = sep.encode(getfilesystemencoding())
 fqname = class_name.replace(b".", b"/").strip(b"/")
 fqpath, fqbase = posixpath.split(posixpath.normpath(fqname))
 return fqpath.replace(b"/", sep), fqbase
 

def get_classpath(filename):  #{{{1
 if isinstance(filename, str):
  filename = filename.encode(getfilesystemencoding())
 
 fqpath, fqbase = split_class_name(get_class_name(filename), b"/")
 
 # try to resolve symlink if file basename is not "{fqbase}.class"
 # one level at a time
 depth = 0
 while not filename_matches_class(filename, fqbase) and os.path.islink(filename):
  filename = os.path.join(os.path.dirname(filename), os.readlink(filename))
  depth += 1
  if depth > 5: raise JavaWrapperError("Symbolic link depth is too deep")
 
 # now get the directory to use in $CLASSPATH, and also check to see that
 # the directory tree is valid (if the class is part of a package)
 for path in [os.path.abspath(os.path.dirname(filename)),
              os.path.realpath(os.path.dirname(filename))]:
  if path.endswith(fqpath):
   return path.rsplit(fqpath)[0] if fqpath else path
 filename_str = filename.decode(getfilesystemencoding(), errors="replace")
 fqpath_str = fqpath.decode("utf-8", errors="replace")
 raise JavaWrapperError("`%s` should be in a path ending with `%s`"
                         % (filename_str, fqpath_str))


def filename_matches_class(filename, class_name=None):  #{{{1
 if isinstance(filename, str):
  filename = filename.encode(getfilesystemencoding())
 if isinstance(class_name, str):
  class_name = class_name.encode(getfilesystemencoding())
 if not class_name:
  class_name = split_class_name(get_class_name(filename), b"/")[1]
 filename  = os.path.basename(filename)
 base, ext = os.path.splitext(filename)
 return base + ext.lower() == class_name + b".class"


def run_class_file(  #{{{1
 filename,
 args=[],
 exec_=False,
 classpath_prepend="",
 **subprocess_kwargs,
):
 os_pathsep = os.pathsep.encode(getfilesystemencoding())
 classpath = get_classpath(filename)
 environb = os.environb.copy()
 if "CLASSPATH" in environb:
  if not re.search(rb"(^|%s)(%s)(:|$)" % (os_pathsep, re.escape(classpath)),
                   environb["CLASSPATH"], re.MULTILINE):
   environb["CLASSPATH"] = classpath + os_pathsep + environb["CLASSPATH"]
 else:
  environb["CLASSPATH"] = classpath
 
 if isinstance(classpath_prepend, str):
  classpath_prepend = classpath_prepend.encode(getfilesystemencoding())
 if classpath_prepend:
  environb["CLASSPATH"] = classpath_prepend + os_pathsep + environb["CLASSPATH"]
 
 if not filename_matches_class(filename):
  tmp_dir = tempfile.mkdtemp().encode(getfilesystemencoding())
  class_dir, class_name = split_class_name(get_class_name(filename), "/")
  os_sep = os.sep.encode(getfilesystemencoding())
  class_dir = os.path.join(tmp_dir, class_dir.replace(b"/", os_sep))
  if not os.path.samefile(tmp_dir, class_dir):
   os.makedirs(class_dir)
  new_filename = os.path.join(class_dir, class_name + b".class")
  if hasattr(os, "symlink"):
   os.symlink(os.path.realpath(filename), new_filename)
  else:
   shutil.copy2(filename, new_filename)
  if classpath_prepend:
   classpath_prepend = class_dir + os_pathsep + classpath_prepend
  else:
   classpath_prepend = class_dir
  ret = None
  try:
   ret = run_class_file(filename=new_filename, args=args, exec_=False,
                        classpath_prepend=classpath_prepend, **subprocess_kwargs)
  except:
   raise
  finally:
   shutil.rmtree(tmp_dir)
  return ret
 
 argv = ["java", get_class_name(filename)] + args
 if exec_:
  os.execvpe(argv[0], argv, environb)
 else:
  return subprocess.call(argv, env=environb, **subprocess_kwargs)


def getfilesystemencoding():  #{{{1
 """Returns the file system encoding, but substitutes UTF-8 for ASCII."""
 enc = sys.getfilesystemencoding()
 try:
  if codecs.lookup(enc).name.lower() == "ascii":
   return "utf-8"
 except LookupError:
  return "utf-8"
 return enc


# Java class name reading  #{{{1

Tag = namedtuple("Tag", "n,size,name")
TagData = namedtuple("TagData", "i,tag,size,data")
Version = namedtuple("Version", "major,minor")

class Tag(Tag):
 def __repr__(self):    return repr(self.name)
 def __str__(self):     return repr(self)


# Negative sizes indicate a -n-byte size prefix,
# with the total size being  value of prefix + 2.
TAGS = {
 1:  Tag(1,  -2, "UTF8"),
 3:  Tag(3,  4,  "INTEGER"),
 4:  Tag(4,  4,  "FLOAT"),
 5:  Tag(5,  8,  "LONG"),
 6:  Tag(6,  8,  "DOUBLE"),
 7:  Tag(7,  2,  "CLASS_REFERENCE"),
 8:  Tag(8,  2,  "STRING_REFERENCE"),
 9:  Tag(9,  4,  "FIELD_REFERENCE"),
 10: Tag(10, 4,  "METHOD_REFERENCE"),
 11: Tag(11, 4,  "INTERFACE_METHOD_REFERENCE"),
 12: Tag(12, 4,  "NAME_AND_TYPE_DESCRIPTOR")
}
for n in list(TAGS.keys()): TAGS[TAGS[n].name] = TAGS[n]
FORMATS = {None: '', 2: '>H', 4: '>I', 8: '>Q'}


def read_tag(fo, i):
 n = struct.unpack("B", fo.read(1))[0]
 try:
  tag = TAGS[n]
 except KeyError:
  raise ValueError("%d is not a valid tag" % n)
 size = tag.size
 if size < 0:
  prefix = -size
  size = struct.unpack(FORMATS[prefix], fo.read(prefix))[0]
  data = fo.read(size)
  return TagData(i, tag, prefix + size, data)
 return TagData(i, tag, size, struct.unpack(FORMATS[size], fo.read(size))[0])


def get_class_name(filename):
 with open(filename, "rb") as fo:
  magic = struct.unpack(">I", fo.read(4))[0]
  if magic != 0xCAFEBABE:
   if isinstance(filename, bytes):
    filename_str = filename.decode(getfilesystemencoding(), errors="replace")
   else:
    filename_str = filename
   raise JavaWrapperError("`%s` is not a valid Java class file" % filename_str)
  version = Version(minor=struct.unpack(">H", fo.read(2)),
                    major=struct.unpack(">H", fo.read(2)))
  cp = [None]
  cp_count = struct.unpack(">H", fo.read(2))[0]
  i = 1
  while i < cp_count:
   tag_data = read_tag(fo, i)
   cp += [tag_data]
   i += 1
  fo.seek(2, os.SEEK_CUR)
  this_class_i = struct.unpack(">H", fo.read(2))[0]
  this_class = cp[this_class_i]
  class_name = cp[this_class.data]
  return class_name.data


def print_cp(cp):
 for i in range(len(cp)):
  if i != 0:
   if cp[i]:
    print("%d: [%d] %s" % (i, cp[i].tag.n, cp[i].data))
   else:
    print("%d: None" % i)


if __name__ == "__main__":  #{{{1
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
