#!/usr/bin/env python3

import json
import os
import sys

from collections import OrderedDict
from typing import *


JSONDict = Dict[str, "JSONType"]  # type: ignore
JSONList = List["JSONType"]  # type: ignore
JSONType = Union[None, bool, int, float, str, JSONList, JSONDict]  # type: ignore
SchemaDict = Dict[str, "SchemaType"]  # type: ignore
SchemaList = List["SchemaType"]  # type: ignore
SchemaType = Union[str, SchemaList, SchemaDict]  # type: ignore


JSON_TYPES = dict(
 NoneType="null",
 bool="boolean",
 int="number",
 float="number",
 str="string",
 list="array",
 dict="object",
)


def dict_schema(d: JSONDict, type_names: Dict[str, str] = None) -> SchemaDict:
 type_names = type_names or {}
 result: SchemaDict = {}
 for k, v in d.items():
  if isinstance(v, dict):
   result[k] = dict_schema(cast(JSONDict, v), type_names)
  elif isinstance(v, list):
   result[k] = list_schema(cast(JSONList, v), type_names)
  else:
   type_name = type(v).__name__
   result[k] = type_names.get(type_name, type_name)
 return result


def list_schema(l: JSONList, type_names: Dict[str, str] = None) -> SchemaList:
 type_names = type_names or {}
 result: SchemaList = []
 for v in l:
  schema_type: SchemaType
  if isinstance(v, dict):
   schema_type = dict_schema(cast(JSONDict, v), type_names)
  elif isinstance(v, list):
   schema_type = list_schema(cast(JSONList, v), type_names)
  else:
   type_name = type(v).__name__
   schema_type = type_names.get(type_name, type_name)
  if schema_type not in result:
   result += [schema_type]
 return result


def json_schema(s: str) -> str:
 d = json.loads(s, object_pairs_hook=OrderedDict)
 schema = dict_schema(d, JSON_TYPES)
 return json.dumps(schema, sort_keys=True, indent=2)


def main(argv: List[str]) -> int:
 prog = os.path.basename(argv[0])
 
 if len(argv) != 2:
  print("Usage: %s json-file (- for standard input)" % prog, file=sys.stderr)
  return 2
 
 filename = argv[1]
 json = ""
 
 if filename == "-":
  json = sys.stdin.read()
 else:
  with open(filename, "r") as f:
   json = f.read()
 
 schema = json_schema(json)
 print(schema)
 
 return 0


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
