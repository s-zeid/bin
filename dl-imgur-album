#!/usr/bin/env python

import json
import os
import re
import sys
import urllib
import warnings

JSON_URL_TEMPLATE = "http://api.imgur.com/2/album/%s.json"

class DownloaderError(Exception):
 pass

class DownloaderWarning(UserWarning):
 pass

def dl_imgur_album(album_url, quiet=False, simple_warnings=False):
 def warn(message, category):
  if quiet: return
  if simple_warnings:
   if not isinstance(simple_warnings, file):
    simple_warnings = sys.stderr
   print >> simple_warnings, "warning: " + message
  else:
   warnings.warn(message, category)
 
 try:
  album = json.loads(album_url)
 except ValueError:
  try:
   album_id = re.findall(r"([0-9a-zA-Z]{5})", album_url)[-1]
  except IndexError:
   raise DownloaderError("%s is not a valid album URL" % album_url)
  
  url = urllib.urlopen(JSON_URL_TEMPLATE % album_id)
  if url.getcode() != 200:
   raise DownloaderError("Could not fetch album info (status code %d)"
    % url.getcode())
  
  try:
   album = json.loads(url.read())
  except ValueError:
   raise DownloaderError("Invalid JSON object returned from server")
 
 if "album" not in album or "images" not in album["album"]:
  raise DownloaderError("JSON object returned from server does not follow"
   + " the correct format")
 
 images = album["album"]["images"]
 for i in xrange(len(images)):
  if not quiet: print >> sys.stderr, "Downloading image %d..." % (i + 1),
  image = images[i]
  if ("image" not in image or "hash" not in image["image"]
      or "links" not in image or "original" not in image["links"]):
   print >> sys.stderr
   warn("Skipping image %d%s because its JSON object is invalid"
    % (i+1," (hash %s)"%image["image"]["hash"] if "hash" in image else ""),
    DownloaderWarning)
   continue
  image_hash = image["image"]["hash"]
  image_url = image["links"]["original"]
  image_filename = image_url.rsplit("/", 1)[1]
  url = urllib.urlopen(image_url)
  if url.getcode() == 200:
   with open(image_filename, "wb") as f:
    f.write(url.read())
  elif url.getcode() == 500 and image_url.endswith(".jpg"):
   url = urllib.urlopen(image_url.replace(".jpg", ".jpeg"))
   if url.getcode() == 200:
    with open(image_filename, "wb") as f:
     f.write(url.read())
  if url.getcode() != 200:
   print >> sys.stderr
   warn("Could not download image %d (hash %s; status code %d)"
    % (i + 1, image_hash, url.getcode()), DownloaderWarning)
   continue
  if not quiet: print >> sys.stderr, "done!"

def main(argv):
 if len(argv) not in (2, 3):
  print >> sys.stderr, "Usage: %s [-q|--quiet] album-url-or-hash"
  return 2
 
 album = argv[1 if len(argv) == 2 else 2]
 quiet = len(argv) == 3 and (argv[1] == "-q" or argv[1] == "--quiet")
 
 if album == "-":
  album = sys.stdin.read()
 
 try:
  dl_imgur_album(album, quiet, True)
 except DownloaderError as exc:
  print >> sys.stderr, "error: " + str(exc)
  return 1
 
 return 0

if __name__ == "__main__":
 sys.exit(main(sys.argv))
