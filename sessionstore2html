#!/usr/bin/env python3
# vim:set fdm=marker:

"""Converts a Firefox sessionstore js/jsonlz4 file to HTML.

A sessionstore file or path to a Firefox profile may be given as an
argument.  To read from standard input, use -.  If no argument is given, this
script will try to find the sessionstore file from the default Firefox profile.

If the WebExtension version of Tree Style Tab is installed, then tabs will be
nested accordingly.  Other tab-tree extensions are not supported.

Currently does not support tab groups.  Tabs from multiple tab groups within a
single window will be mixed together depending on the order they appear in the
sessionstore file.

To read jsonlz4 files used in newer versions of Firefox, you will need to run
`pip3 install lz4` (or install that package some other way).

If a tab contains an unsaved note from my Note Tab webapp
(<https://code.s.zeid.me/note-tab>), then the tab's URL will be rewritten to
contain the unsaved note.  The original URL will be saved to a data attribute.

"""

# Plumbing {{{1

import argparse
import base64
import configparser
import html
import io
import json
import os
import platform
import string
import sys
import warnings

from typing import *

import lz4.block  # pip3 install lz4


# Templates and template helpers {{{1

def indent(s: str, n: int) -> str:
 return "\n".join((" " * (n * int(not l.startswith("$")))) + l for l in s.splitlines())


class Template(NamedTuple):
 template: str
 indent: int
 
 def compile(self) -> string.Template:
  return string.Template(indent(self.template, self.indent))


PAGE_TEMPLATE = Template("""<!DOCTYPE html>

<ht""" """ml>
 <head>
  <meta charset="utf-8" />
  <title>Firefox Tabs</title>
  <meta name="generator" content="sessionstore2html (https://code.s.zeid.me/bin/blob/master/sessionstore2html)" />
  <link rel="stylesheet" type="text/css" href="https://s.zeid.me/styles/basic.css" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Material+Icons" />
  <style type="text/css">
   body { background: #f8f8f8; }
   li { line-height: 22px; }
   .tabs { padding-left: 0.5em; }
   .tab { list-style-type: none; }
   .tab .link { display: table-row; }
   .tab .icon { display: table-cell; position: relative; top: 0.15em;
                width: 16px; max-height: 16px; font-size: 16px; color: #666; }
   .tab .icon[alt^="photo"] { color: #668; }
   .tab .title { display: table-cell; padding-left: 0.25em; }
   .tab.pinned + .tab:not(.pinned) { border-top: 1px solid #ddd;
                                     margin-top: 0.5em; padding-top: 0.5em; }
   .tab .children { border-left: 1px solid #ddd; margin: 0 0 0 8px; }
   .tab + .tab, .children > .tab:first-child { margin-top: 0.125em; }
   
   /* workaround for favicons blocked by uBlock Origin
      (e.g. Fanboy's Enhanced Tracking List) */
   .tab .icon[hidden] + .title:before {
    content: "tab"; font: 16px "Material Icons"; color: #666;
    position: relative; left: -0.25em; top: 0.125em; width: 16px; height: 16px;
   }
  </style>
  <!--[if lt IE 9]>
   <script type="text/javascript" src="https://s.zeid.me/html5shiv.js"></script>
   <script type="text/javascript" src="https://s.zeid.me/html5shiv-printshiv.js"></script>
  <![endif]-->
 </head>
 <body>
  <h1>Firefox Tabs</h1>
  <section id="windows">
   <ul>
$window_list
   </ul>
  </section>
$windows
 </body>
</html>
""", 0).compile()

WINDOW_LIST_TEMPLATE = Template("""<li>
 <a href="#window-$n">Window $n ($n_tabs $tabs_word)</a>
</li>""", 4).compile()

WINDOW_TEMPLATE = Template("""<section id="window-$n" class="window">
 <h2>Window $n ($n_tabs $tabs_word)</h2>
 <ul class="tabs">
$tabs
 </ul>
 <p><a href="#">Back to top</a></p>
</section>""", 2).compile()

TAB_TEMPLATE = Template("""<li class="tab$extra_classes">
 <a href="$url"$data_attributes target="_blank" class="link">
  <img src="$icon" alt="$material_icon" class="icon material-icons"
  /><span class="title">$title</span>
 </a>
 <ul class="children tabs">$children</ul>
</li>""", 4).compile()

TABS_WORD = ("tab", "tabs")


# sessionstore parsing {{{1

class Tab:  #{{{2
 _src: dict
 _entry: dict
 
 icon: str
 title: str
 url: str
 _pinned: bool
 _structured_clone_state: bytes
 _original_url: Optional[str]
 _children: List["Tab"]
 _parent: Optional["Tab"]
 _processed: Union[bool, int, float]

 _tree: "_Tree"
 class _Tree:
  is_member: bool = False
  id: str = ""
  ancestors: List[str]
  before: str = ""
  after: str = ""
  children: List[str]
  collapsed: bool = False
 
 def __init__(self, src: dict) -> None:
  if not src.get("entries"):
   raise ValueError("source dict must have an \"entries\" key")
  
  self._src = src
  self._entry = entry = src["entries"][src["index"] - 1]
 
  self.icon = src.get("image", src.get("attributes", {}).get("image", "")) or ""
  self.title = entry.get("title", os.path.basename(entry["url"]))
  self.url = entry["url"]
  self._pinned = src.get("pinned", False)
  self._original_url = None
  self._children = []
  self._parent = cast(None, ...)
  self._processed = False
  self._tree = self._Tree()
  
  ext = src.get("extData", {})
  ext_tst = "extension:treestyletab@piro.sakura.ne.jp:"
  if ext_tst + "data-persistent-id" in ext:
   self._tree.is_member = True
   self._tree.id = json.loads(ext.get(ext_tst + "data-persistent-id", "{}")).get("id", "")
   self._tree.ancestors = json.loads(ext.get(ext_tst + "ancestors", "[]"))
   self._tree.before = json.loads(ext.get(ext_tst + "insert-before", '""'))
   self._tree.after = json.loads(ext.get(ext_tst + "isnert-after",  # typo is upstream
                                 ext.get(ext_tst + "insert-after",  # in case they fix it
                                 '""')))
   self._tree.children = json.loads(ext.get(ext_tst + "children", "[]"))
   self._tree.collapsed = json.loads(ext.get(ext_tst + "subtree-collapsed", "null"))
  else:
   self._tree.ancestors = []
   self._tree.children = []
  
  self._structured_clone_state = b""
  try:
   self._structured_clone_state = base64.b64decode(entry.get("structuredCloneState", ""))
  except Exception:
   warnings.warn("could not decode structuredCloneState")
  
  note_tab_magic = b"urn:uuid:46e56985-cff3-45fd-b1b7-c5f84fbb921c"
  if note_tab_magic in self._structured_clone_state:
   note_tab_start = self._structured_clone_state.index(note_tab_magic)
   note_tab_end = self._structured_clone_state.find(b"\0", note_tab_start)
   if note_tab_end >= 0:
    note_tab_urn = self._structured_clone_state[note_tab_start:note_tab_end]
    if b"#" in note_tab_urn:
     note_tab_hash = note_tab_urn[note_tab_urn.index(b"#"):].decode("utf-8")
     self._original_url = self.url
     self.url = self.url[:self.url.find("#")] + note_tab_hash
 
 @staticmethod
 def count(tabs: List["Tab"]) -> int:
  return len(tabs) + sum([Tab.count(i._children) for i in tabs])


class Window:  #{{{2
 _src: dict
 
 tabs: List[Tab]
 tree: List[Tab]
 
 def __init__(self, src: dict) -> None:
  self._src = src
  self.tabs = [Tab(tab) for tab in src["tabs"] if "entries" in tab]
  self.tree = self._build_tree()
 
 def _build_tree(self) -> List[Tab]:
  if not self.tabs[0]._tree.is_member:
   return self.tabs
  
  result: List[Tab] = []
  tabs_dict = dict([(i._tree.id, i) for i in self.tabs if i._tree.id])
  
  for tab in self.tabs:
   if not len(tab._tree.ancestors):
    result += [tab]
    tab._parent = None
  
  def build_subtree(tab: Tab) -> None:
   for child_id in tab._tree.children:
    if child_id in tabs_dict:
     child = tabs_dict[child_id]
     insert_child(child, tab)
     build_subtree(child)
     child._processed = 1
  
  def insert_child(child: Tab, parent: Optional[Tab]) -> None:
   before = tabs_dict.get(child._tree.before, None)
   after = tabs_dict.get(child._tree.after, None)
   siblings = parent._children if parent else result
   if child in siblings:
    siblings.remove(child)
   if before in siblings:
    before_index = siblings.index(before)
    siblings[before_index:before_index] = [child]
   elif after in siblings:
    after_index = siblings.index(after)
    siblings[after_index+1:after_index+1] = [child]
   else:
    siblings += [child]
   child._parent = parent or None
  
  for tab in result:
   build_subtree(tab)
   tab._processed = 2
  
  # Insert orphaned tabs while making a best effort to preserve their
  # original positions
  
  orphans = [tab for tab in self.tabs if not tab._processed]
 
  for orphan in orphans:
   # Propagate before/after to orphaned ancestors of orphaned tabs
   before = tabs_dict.get(orphan._tree.before, None)
   after = tabs_dict.get(orphan._tree.after, None)
   for anc_id in orphan._tree.ancestors:
    if anc_id in tabs_dict:
     anc = tabs_dict[anc_id]
     if not anc._processed:
      if before:
       anc._tree.before = before._tree.id
      if after:
       anc._tree.after = after._tree.id
     break
  
  delayed: List[Tab] = []
  for pass_ in (1, 2):
   # Insert in 2 passes.  The second pass is for tabs whose before xor after
   # is set and which have an orphaned ancestor, since a better position
   # might be available on the second pass.
   for orphan in (orphans if pass_ == 1 else delayed):
    before = tabs_dict.get(orphan._tree.before, None)
    after = tabs_dict.get(orphan._tree.after, None)
    
    for anc_id in orphan._tree.ancestors:
     # non-orphaned ancestor
     if anc_id in tabs_dict:
      anc = tabs_dict[anc_id]
      if anc._processed:
       insert_child(orphan, anc)
       orphan._processed = 3
       break
    
    else:
     # orphaned ancestor; try to use parent of adjacent tab
     if before:
      parent = before._parent
     elif after:
      parent = after._parent
     else:
      parent = None
     
     if parent and parent is not Ellipsis and parent is not orphan:
      # adjacent tab has parent
      insert_child(orphan, parent)
      orphan._processed = 4
     elif pass_ == 1 and ((before and not after) or (after and not before)):
      # delay if before xor after are set because a better position might
      # be available in the next pass
      delayed += [orphan]
     else:
      # add to root level as a last resort
      insert_child(orphan, None)
      orphan._processed = 5
    
    if pass_ == 2 and isinstance(orphan._processed, (int, float)):
     orphan._processed += 0.2
  
  return result


class Session:  #{{{2
 _src: dict
 windows: List[Window]
 
 def __init__(self, input: Union[io.IOBase, bytes, str]) -> None:
  src = cast(Any, input)
  if isinstance(src, io.IOBase):
   src = cast(Any, src).read()
  if isinstance(src, bytes):
   if src.startswith(b"mozLz40\0"):
    src = lz4.block.decompress(src[8:])
   src = src.decode("utf-8")
  
  self._src = src = json.loads(src)
  self.windows = [Window(window) for window in src["windows"]]


# HTML generation {{{1

def make_html(windows: List[Window],
              page_tpl: string.Template = PAGE_TEMPLATE,
              window_list_tpl: string.Template = WINDOW_LIST_TEMPLATE,
              window_tpl: string.Template = WINDOW_TEMPLATE,
              tab_tpl: string.Template = TAB_TEMPLATE,
              tabs_word: Tuple[str, str] = TABS_WORD) -> str:
 return page_tpl.substitute(
  windows="\n".join([
   window_tpl.substitute(
    n=str(i+1),
    n_tabs=str(Tab.count(windows[i].tree)),
    tabs_word=tabs_word[int(Tab.count(windows[i].tree) > 1)],
    tabs="\n".join([make_tab(tab, tab_tpl) for tab in windows[i].tree])
   )
   for i in range(len(windows))
  ]),
  window_list="\n".join([window_list_tpl.substitute(
   n=str(i+1),
   n_tabs=str(Tab.count(windows[i].tree)),
   tabs_word=tabs_word[int(Tab.count(windows[i].tree) > 1)]
  ) for i in range(len(windows))])
 )


def make_tab(tab: Tab, tab_tpl: string.Template = TAB_TEMPLATE) -> str:
 params = dict(
  icon=html.escape(tab.icon),
  title=html.escape(tab.title),
  url=html.escape(tab.url),
 )
 
 data_attributes: List[str] = []
 if tab._original_url:
  data_attributes += ['data-original-url="%s"' % html.escape(tab._original_url)]
 params["data_attributes"] = " " + " ".join(data_attributes) if data_attributes else ""
 
 params["material_icon"] = "tab"
 if tab.url == tab.icon:
  params["icon"] = ""
  params["material_icon"] = "photo_size_select_actual"
 
 extra_classes: List[str] = []
 if tab._pinned:
  extra_classes += ["pinned"]
 params["extra_classes"] = " " + " ".join(extra_classes) if extra_classes else ""
 
 params["children"] = "\n".join([make_tab(i, tab_tpl) for i in tab._children])
 if params["children"]:
  params["children"] = indent("\n%s\n   " % params["children"], 2)
 
 return tab_tpl.substitute(params)


# Profile/sessionstore.js finders {{{1

def get_default_profile_path(profiles_dir: Optional[str] = None) -> Optional[str]:
 if profiles_dir is None:
  # Praise Linux!
  home = os.path.expanduser("~")
  profiles_dir = os.path.join(home, ".mozilla", "firefox")
  if platform.system().lower() == "windows":
   profiles_dir = None
   appdata = os.environ.get("APPDATA", "")
   if appdata:
    profiles_dir = os.path.join(appdata, "Mozilla", "Firefox")
  elif platform.system().lower() == "darwin":
   profiles_dir = os.path.join(home, "Library", "Application Support", "Firefox")
 
 if not os.path.isdir(profiles_dir or ""):
  return None
 
 profiles_dir = cast(str, profiles_dir)
 profile = None
 
 cp = configparser.RawConfigParser(None, dict, True)
 with open(os.path.join(profiles_dir, "profiles.ini"), "r") as f:
  cp.read_file(f)
 for section in cp.sections():
  if section.lower() != "general":
   if cp.has_option(section, "Default") and cp.has_option(section, "Path"):
    if cp.get(section, "Default") == "1":
     profile = cp.get(section, "Path")
     break
 
 if profile:
  profile_dir = os.path.join(profiles_dir, profile)
  if os.path.isdir(profile_dir):
   return profile_dir
 
 return None


def get_sessionstore_js_path(profile_dir: str) -> Optional[str]:
 sessionstore_backups_dir = os.path.join(profile_dir, "sessionstore-backups")
 if os.path.isdir(sessionstore_backups_dir):
  recovery_mozlz = os.path.join(sessionstore_backups_dir, "recovery.jsonlz4")
  recovery_js = os.path.join(sessionstore_backups_dir, "recovery.js")
  previous_mozlz = os.path.join(sessionstore_backups_dir, "previous.jsonlz4")
  previous_js = os.path.join(sessionstore_backups_dir, "previous.js")
  if os.path.isfile(recovery_mozlz) or os.path.isfile(previous_mozlz):
   if os.path.isfile(recovery_mozlz):
    return recovery_mozlz
   elif os.path.isfile(previous_mozlz):
    return previous_mozlz
  elif os.path.isfile(recovery_js) or os.path.isfile(previous_js):
   if os.path.isfile(recovery_js):
    return recovery_js
   elif os.path.isfile(previous_js):
    return previous_js
 else:
  legacy_js = os.path.join(profile_dir, "sessionstore.js")
  if os.path.isfile(legacy_js):
   return legacy_js
 return None


def main(argv: List[str]) -> int:  #{{{1
 desc, epilog = __doc__.split("\n\n", 1)
 p = argparse.ArgumentParser(
  description=desc.strip(),
  epilog=epilog.strip(),
  formatter_class=argparse.RawDescriptionHelpFormatter,
 )
 p.add_argument("--hep", dest="_hep_easter_egg", action="store_true",
                help=argparse.SUPPRESS)
 p.add_argument("-l", "--print-path", action="store_true",
                help="print the detected path to the session store file and exit")
 p.add_argument("sessionstore_or_profile_path", default=None, nargs="?",
                help="the session store file or profile path (default: autodetect)")

 try:
  options = p.parse_args(argv[1:])
 except SystemExit as exc:
  return exc.code
 
 if options._hep_easter_egg:
  print("Hep!  Hep!  I'm covered in sawlder! ... Eh?  Nobody comes.")
  print("--Red Green, https://www.youtube.com/watch?v=qVeQWtVzkAQ#t=6m27s")
  return 0
 
 sessionstore_js = options.sessionstore_or_profile_path
 
 if sessionstore_js is None:
  profile_path = get_default_profile_path()
  if not profile_path:
   print("error: could not find default Firefox profile", file=sys.stderr)
   return 1
  sessionstore_js = get_sessionstore_js_path(profile_path)
  if not sessionstore_js:
   print("error: could not find sessionstore.js file in the default"
         " Firefox profile", file=sys.stderr)
   return 1
 elif os.path.isdir(sessionstore_js):
  profile_path = cast(str, sessionstore_js)
  sessionstore_js = get_sessionstore_js_path(profile_path)
  if not sessionstore_js:
   print("error: could not find sessionstore.js file in the given"
         " Firefox profile", file=sys.stderr)
   return 1
 
 if options.print_path:
  print(sessionstore_js)
  return 0

 if isinstance(sessionstore_js, str):
  if sessionstore_js == "-":
   sessionstore_js = sys.stdin.buffer
  else:
   sessionstore_js = open(sessionstore_js, "rb")
 
 session = Session(sessionstore_js)
 print(make_html(session.windows))
 
 if sessionstore_js != sys.stdin.buffer:
  sessionstore_js.close()
 
 return 0


if __name__ == "__main__":  #{{{1
 try:
  sys.exit(main(sys.argv))
 except (KeyboardInterrupt, BrokenPipeError):
  pass
