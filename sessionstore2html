#!/usr/bin/env python3
# vim:set fdm=marker:

"""Converts a Firefox sessionstore js/jsonlz4 file to HTML.

A sessionstore file or path to a Firefox profile may be given as an
argument.  To read from standard input, use -.  If no argument is given, this
script will try to find the sessionstore file from the default Firefox profile.

If the WebExtension version of Tree Style Tab is installed, then tabs will be
nested accordingly.  Other tab-tree extensions are not supported.

Currently does not support tab groups.  Tabs from multiple tab groups within a
single window will be mixed together depending on the order they appear in the
sessionstore file.

To read jsonlz4 files used in newer versions of Firefox, you will need to run
`pip3 install lz4` (or install that package some other way).

"""

# Plumbing {{{1

import configparser
import html
import io
import json
import os
import platform
import string
import sys

from collections import namedtuple

import lz4.block  # pip3 install lz4


# Templates and template helpers {{{1

def indent(s, n):
 return "\n".join((" " * (n * int(not l.startswith("$")))) + l for l in s.splitlines())
Template = namedtuple("Template", "template,indent")
class Template(Template):
 def compile(self): return string.Template(indent(self[0], self[1]))


PAGE_TEMPLATE = Template("""<!DOCTYPE html>

<ht""" """ml>
 <head>
  <meta charset="utf-8" />
  <title>Firefox Tabs</title>
  <link rel="stylesheet" type="text/css" href="https://s.zeid.me/styles/basic.css" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Material+Icons" />
  <style type="text/css">
   body { background: #f8f8f8; }
   li { line-height: 22px; }
   .tabs { padding-left: 0.5em; }
   .tab { list-style-type: none; }
   .tab .link { display: table-row; }
   .tab .icon { display: table-cell; position: relative; top: 0.15em;
                width: 16px; max-height: 16px; font-size: 16px; color: #666; }
   .tab .icon[alt^="photo"] { color: #668; }
   .tab .title { display: table-cell; padding-left: 0.25em; }
   .tab.pinned + .tab:not(.pinned) { border-top: 1px solid #ddd;
                                     margin-top: 0.5em; padding-top: 0.5em; }
   .tab .children { border-left: 1px solid #ddd; margin: 0 0 0 8px; }
   .tab + .tab, .children > .tab:first-child { margin-top: 0.125em; }
   
   /* workaround for favicons blocked by uBlock Origin
      (e.g. Fanboy's Enhanced Tracking List) */
   .tab .icon[hidden] + .title:before {
    content: "tab"; font: 16px "Material Icons"; color: #666;
    position: relative; left: -0.25em; top: 0.125em; width: 16px; height: 16px;
   }
  </style>
  <!--[if lt IE 9]>
   <script type="text/javascript" src="https://s.zeid.me/html5shiv.js"></script>
   <script type="text/javascript" src="https://s.zeid.me/html5shiv-printshiv.js"></script>
  <![endif]-->
 </head>
 <body>
  <h1>Firefox Tabs</h1>
  <section id="windows">
   <ul>
$window_list
   </ul>
  </section>
$windows
 </body>
</html>
""", 0).compile()

WINDOW_LIST_TEMPLATE = Template("""<li>
 <a href="#window-$n">Window $n ($n_tabs $tabs_word)</a>
</li>""", 4).compile()

WINDOW_TEMPLATE = Template("""<section id="window-$n" class="window">
 <h2>Window $n ($n_tabs $tabs_word)</h2>
 <ul class="tabs">
$tabs
 </ul>
 <p><a href="#">Back to top</a></p>
</section>""", 2).compile()

TAB_TEMPLATE = Template("""<li class="tab$extra_classes">
 <a href="$url" target="_blank" class="link">
  <img src="$icon" alt="$material_icon" class="icon material-icons"
  /><span class="title">$title</span>
 </a>
 <ul class="children tabs">$children</ul>
</li>""", 4).compile()

TABS_WORD = ("tab", "tabs")


# sessionstore parsing {{{1

def windows_from_sessionstore(store):
 if isinstance(store, io.IOBase):
  store = store.read()
 if isinstance(store, bytes):
  if store.startswith(b"mozLz40\0"):
   store = lz4.block.decompress(store[8:])
  store = store.decode("utf-8")
 store = json.loads(store)
 return [window_to_list(window) for window in store["windows"]]


def window_to_list(window):
 return build_tree([i for i in [tab_to_dict(tab) for tab in window["tabs"]] if i])


def tab_to_dict(tab):
 if not tab.get("entries"):
  return None
 
 result = {
  "icon":  tab.get("image", tab.get("attributes", {}).get("image", "")) or "",
  "title": tab["entries"][tab["index"] - 1].get("title",
            os.path.basename(tab["entries"][tab["index"] - 1]["url"])),
  "url":   tab["entries"][tab["index"] - 1]["url"],
  "_pinned": tab.get("pinned", False),
  "_children": [],
  "_parent": ...,
  "__processed": False,
 }
 
 ext = tab.get("extData", {})
 ext_tst = "extension:treestyletab@piro.sakura.ne.jp:"
 if ext_tst + "data-persistent-id" in ext:
  result.update({
   "_tst_id": json.loads(ext.get(ext_tst + "data-persistent-id", "{}")).get("id", ""),
   "_tst_ancestors": json.loads(ext.get(ext_tst + "ancestors", "[]")),
   "_tst_before": json.loads(ext.get(ext_tst + "insert-before", '""')),
   "_tst_after": json.loads(ext.get(ext_tst + "isnert-after",  # typo is upstream
                            ext.get(ext_tst + "insert-after",  # in case they fix it
                            '""'))),
   "_tst_collapsed": json.loads(ext.get(ext_tst + "subtree-collapsed", "null")),
   "_tst_children": json.loads(ext.get(ext_tst + "children", "[]")),
  })
 
 return result


def build_tree(tabs_in):
 if "_tst_id" not in tabs_in[0]:
  return tabs_in
 
 tabs_out = []
 tabs_dict = dict([(i["_tst_id"], i) for i in tabs_in if i["_tst_id"]])
 
 for tab in tabs_in:
  if not len(tab["_tst_ancestors"]):
   tabs_out += [tab]
   tab["_parent"] = None
 
 def build_subtree(tab):
  for child_id in tab["_tst_children"]:
   if child_id in tabs_dict:
    child = tabs_dict[child_id]
    insert_child(child, tab)
    build_subtree(child)
    child["__processed"] = 1
 
 def insert_child(child, parent):
  before = tabs_dict.get(child["_tst_before"], None)
  after = tabs_dict.get(child["_tst_after"], None)
  siblings = parent["_children"] if parent else tabs_out
  if child in siblings:
   siblings.remove(child)
  if before in siblings:
   before_index = siblings.index(before)
   siblings[before_index:before_index] = [child]
  elif after in siblings:
   after_index = siblings.index(after)
   siblings[after_index+1:after_index+1] = [child]
  else:
   siblings += [child]
  child["_parent"] = parent or None
 
 for tab in tabs_out:
  build_subtree(tab)
  tab["__processed"] = 2
 
 # Insert orphaned tabs while making a best effort to preserve their
 # original positions
 
 orphans = [tab for tab in tabs_in if not tab["__processed"]]

 for orphan in orphans:
  # Propagate before/after to orphaned ancestors of orphaned tabs
  before = tabs_dict.get(orphan["_tst_before"], None)
  after = tabs_dict.get(orphan["_tst_after"], None)
  for anc_id in orphan["_tst_ancestors"]:
   if anc_id in tabs_dict:
    anc = tabs_dict[anc_id]
    if not anc["__processed"]:
     if before:
      anc["_tst_before"] = before["_tst_id"]
     if after:
      anc["_tst_after"] = after["_tst_id"]
    break
 
 delayed = []
 for pass_ in (1, 2):
  # Insert in 2 passes.  The second pass is for tabs whose before xor after
  # is set and which have an orphaned ancestor, since a better position
  # might be available on the second pass.
  for orphan in (orphans if pass_ == 1 else delayed):
   before = tabs_dict.get(orphan["_tst_before"], None)
   after = tabs_dict.get(orphan["_tst_after"], None)
   
   for anc_id in orphan["_tst_ancestors"]:
    # non-orphaned ancestor
    if anc_id in tabs_dict:
     anc = tabs_dict[anc_id]
     if anc["__processed"]:
      insert_child(orphan, anc)
      orphan["__processed"] = 3
      break
   
   else:
    # orphaned ancestor; try to use parent of adjacent tab
    if before:
     parent = before["_parent"]
    elif after:
     parent = after["_parent"]
    else:
     parent = None
    
    if parent and parent is not Ellipsis and parent is not orphan:
     # adjacent tab has parent
     insert_child(orphan, parent)
     orphan["__processed"] = 4
    elif pass_ == 1 and ((before and not after) or (after and not before)):
     # delay if before xor after are set because a better position might
     # be available in the next pass
     delayed += [orphan]
    else:
     # add to root level as a last resort
     insert_child(orphan, None)
     orphan["__processed"] = 5
   
   if pass_ == 2 and isinstance(orphan["__processed"], (int, float)):
    orphan["__processed"] += 0.2
 
 return tabs_out


# HTML generation {{{1

def count_tabs(tabs):
 return len(tabs) + sum([count_tabs(i["_children"]) for i in tabs])


def make_html(windows,
              page_tpl=PAGE_TEMPLATE,
              window_list_tpl=WINDOW_LIST_TEMPLATE,
              window_tpl=WINDOW_TEMPLATE,
              tab_tpl=TAB_TEMPLATE,
              tabs_word=TABS_WORD):
 return page_tpl.substitute(
  windows="\n".join([
   window_tpl.substitute(
    n=i+1,
    n_tabs=count_tabs(windows[i]),
    tabs_word=tabs_word[int(count_tabs(windows[i]) > 1)],
    tabs="\n".join([make_tab(tab, tab_tpl) for tab in windows[i]])
   )
   for i in range(len(windows))
  ]),
  window_list="\n".join([window_list_tpl.substitute(
   n=i+1, n_tabs=count_tabs(windows[i]), tabs_word=tabs_word[int(count_tabs(windows[i]) > 1)]
  ) for i in range(len(windows))])
 )


def make_tab(tab, tab_tpl=TAB_TEMPLATE):
 params = dict([(k, html.escape(tab[k], True)) for k in tab
                if not k.startswith("_")])
 
 params["material_icon"] = "tab"
 if tab["url"] == tab["icon"]:
  params["icon"] = ""
  params["material_icon"] = "photo_size_select_actual"
 
 extra_classes = []
 if tab["_pinned"]:
  extra_classes += ["pinned"]
 params["extra_classes"] = " " + " ".join(extra_classes) if len(extra_classes) else ""
 
 params["children"] = "\n".join([make_tab(i, tab_tpl) for i in tab["_children"]])
 if len(params["children"]):
  params["children"] = indent("\n%s\n   " % params["children"], 2)
 
 return tab_tpl.substitute(params)


# Profile/sessionstore.js finders {{{1

def get_default_profile_path(profiles_dir=None):
 if profiles_dir is None:
  # Linux master race
  home = os.path.expanduser("~")
  profiles_dir = os.path.join(home, ".mozilla", "firefox")
  if platform.system().lower() == "windows":
   profiles_dir = None
   appdata = os.environ.get("APPDATA", "")
   if appdata:
    profiles_dir = os.path.join(appdata, "Mozilla", "Firefox")
  elif platform.system().lower() == "darwin":
   profiles_dir = os.path.join(home, "Library", "Application Support", "Firefox")
 
 if not os.path.isdir(profiles_dir or ""):
  return None
 
 profile = None
 
 cp = configparser.RawConfigParser(None, dict, True)
 with open(os.path.join(profiles_dir, "profiles.ini"), "r") as f:
  cp.read_file(f)
 for section in cp.sections():
  if section.lower() != "general":
   if cp.has_option(section, "Default") and cp.has_option(section, "Path"):
    if cp.get(section, "Default") == "1":
     profile = cp.get(section, "Path")
     break
 
 if profile:
  profile_dir = os.path.join(profiles_dir, profile)
  if os.path.isdir(profile_dir):
   return profile_dir
 
 return None


def get_sessionstore_js_path(profile_dir):
 sessionstore_backups_dir = os.path.join(profile_dir, "sessionstore-backups")
 if os.path.isdir(sessionstore_backups_dir):
  recovery_mozlz = os.path.join(sessionstore_backups_dir, "recovery.jsonlz4")
  recovery_js = os.path.join(sessionstore_backups_dir, "recovery.js")
  previous_mozlz = os.path.join(sessionstore_backups_dir, "previous.jsonlz4")
  previous_js = os.path.join(sessionstore_backups_dir, "previous.js")
  if os.path.isfile(recovery_mozlz) or os.path.isfile(previous_mozlz):
   if os.path.isfile(recovery_mozlz):
    return recovery_mozlz
   elif os.path.isfile(previous_mozlz):
    return previous_mozlz
  elif os.path.isfile(recovery_js) or os.path.isfile(previous_js):
   if os.path.isfile(recovery_js):
    return recovery_js
   elif os.path.isfile(previous_js):
    return previous_js
 else:
  legacy_js = os.path.join(profile_dir, "sessionstore.js")
  if os.path.isfile(legacy_js):
   return legacy_js


def main(argv):  #{{{1
 usage = "Usage: %s [--help|-h|-|[-- ]{sessionstore-js|profile-dir}]"
 usage += "\n" + __doc__.rstrip()
 if len(argv) == 3 and argv[1] == "--":
  sessionstore_js = argv[2]
 elif len(argv) == 2 and argv[1] == "-":
  sessionstore_js = sys.stdin
 elif len(argv) == 2 and argv[1] in ("--help", "-h"):
  print(usage % argv[0])
  return 0
 elif len(argv) == 1:
  sessionstore_js = None
 elif len(argv) not in (2, 3):
  print(usage % argv[0], file=sys.stderr)
  return 2
 else:
  sessionstore_js = argv[1]
 
 if sessionstore_js is None:
  profile_path = get_default_profile_path()
  if not profile_path:
   print("error: could not find default Firefox profile", file=sys.stderr)
   return 1
  sessionstore_js = get_sessionstore_js_path(profile_path)
  if not sessionstore_js:
   print("error: could not find sessionstore.js file in the default"
         " Firefox profile", file=sys.stderr)
   return 1
 elif os.path.isdir(sessionstore_js):
  profile_path = sessionstore_js
  sessionstore_js = get_sessionstore_js_path(profile_path)
  if not sessionstore_js:
   print("error: could not find sessionstore.js file in the given"
         " Firefox profile", file=sys.stderr)
   return 1

 if isinstance(sessionstore_js, str):
  sessionstore_js = open(sessionstore_js, "rb")
 
 print(make_html(windows_from_sessionstore(sessionstore_js)))
 
 if sessionstore_js != sys.stdin:
  sessionstore_js.close()
 
 return 0


if __name__ == "__main__":  #{{{1
 sys.exit(main(sys.argv))
