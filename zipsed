#!/usr/bin/env python2

"Rename files in a ZIP archive."

import argparse
import os
import re
import sys
import zipfile

try:
 from cStringIO import StringIO
except ImportError:
 from StringIO import StringIO

def zipsed(in_file, search, replace, exact=False, regex=False):
 out_file = StringIO()
 in_zip   = zipfile.ZipFile(in_file, "r")
 out_zip  = zipfile.ZipFile(out_file, "w", zipfile.ZIP_DEFLATED)
 
 for info in in_zip.infolist():
  original_name = info.filename[:]
  if exact:
   if original_name == search:
    info.filename = replace
  elif regex:
   info.filename = search.sub(replace, original_name)
  else:
   info.filename = original_name.replace(search, replace)
  out_zip.writestr(info, in_zip.read(original_name))
 
 in_zip.close()
 out_zip.close()
 out_file.seek(0)
 return out_file

def main(argv):
 parser = argparse.ArgumentParser(
  description="Rename files in a ZIP archive.",
  epilog="If neither --regex nor --search are set, then search and replace are"
         " treated as exact file names, including path components."
 )
 parser.add_argument("--regex", "-r", default=False, action="store_true",
  help="Treat old-name as a regular expression.  new-name may contain"
       " references.")
 parser.add_argument("--search", "-s", default=False, action="store_true",
  help="Treat old-name and new-name as plain search and replace patterns.")
 parser.add_argument("--input", "-i", default=sys.stdin,
  help="Input file (default is standard input)")
 parser.add_argument("--output", "-o", default=sys.stdout,
  help="Output file (default is standard output)")
 parser.add_argument("old_name", metavar="old-name",
  help="The filename or search string to rename")
 parser.add_argument("new_name", metavar="new-name",
  help="The new name or replacement pattern")
 args = parser.parse_args(argv[1:])
 
 if args.regex:
  old_name = re.compile(args.old_name, re.MULTILINE|re.UNICODE)
 else:
  old_name = args.old_name
 result = zipsed(StringIO(args.input.read()) if args.input==sys.stdin else args.input,
                 old_name, args.new_name,
                 exact=(not args.search and not args.regex), regex=args.regex)
 
 if args.output == sys.stdout:
  args.output.write(result.read())
 else:
  with open(args.output) as out:
   out.write(result.read())

if __name__ == "__main__":
 sys.exit(main(sys.argv))
