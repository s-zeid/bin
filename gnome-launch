#!/usr/bin/env python3

# Thanks to Aleksandar Jovanov:
# <http://aleksandarjovanov.blogspot.com/2012/10/having-fun-with-gnome-shell.html>

import json
import os
import sys

from typing import *

import dbus  # type: ignore


class AppNotFoundError(RuntimeError):
 pass


class ShellJSError(RuntimeError):
 pass


def gnome_shell_eval(js: str, dir: bool = False) -> str:
 if dir:
  js = """(function(obj) {
   let result = [];
   for (let prop in obj) {
    result.push(prop);
   };
   result.sort();
   return result;
  })(%s);""" % (js or "globalThis")
 
 bus = dbus.SessionBus()
 Shell = bus.get_object("org.gnome.Shell", "/org/gnome/Shell")
 success, result = Shell.Eval(js, dbus_interface="org.gnome.Shell")
 if not success:
  raise ShellJSError(result)
 return result


def gnome_shell_launch(app: str):
 name_esc = json.dumps(app.strip().lower())
 path_esc = json.dumps(os.path.abspath(os.path.expanduser(app)))
 
 result = gnome_shell_eval("""(function(name_esc, path_esc) {
  function find_app(name, path) {
   const apps = imports.gi.Shell.AppSystem.get_default().get_installed();
   for (let i = 0; i < apps.length; i++) {
    if (apps[i].get_filename() == path_esc)  // absolute .desktop path (.get_id() for basename)
     return apps[i];
   }
   for (let i = 0; i < apps.length; i++) {
    if (apps[i].get_name().trim().toLowerCase() == name_esc)  // display name
     return apps[i];
   }
  }
  
  const app = find_app(name_esc, path_esc);
  if (app) {
   app.launch([], null);
   return true;
  }
  return false;
 })(%s, %s);""" % (name_esc, path_esc))
 
 result = json.loads(result)
 if not result:
  raise AppNotFoundError("could not find the app '%s'" % app)


def main(argv: List[str]) -> int:
 if len(argv) != 2:
  prog = os.path.basename(argv[0])
  print("Usage: %s {app name or .desktop file}" % prog, file=sys.stderr)
  return 2
 
 try:
  gnome_shell_launch(argv[1])
  return 0
 except ShellJSError as exc:
  print("JS error: %s" % exc, file=sys.stderr)
  return 1
 except RuntimeError as exc:
  print("error: %s" % exc, file=sys.stderr)
  return 1


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
