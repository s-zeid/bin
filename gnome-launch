#!/usr/bin/env python

# Thanks to Aleksandar Jovanov:
# <http://aleksandarjovanov.blogspot.com/2012/10/having-fun-with-gnome-shell.html>

import json
import os
import sys

import dbus

class ShellJSError(Exception): pass

def main(argv):
 if len(argv) != 2:
  print >> sys.stderr, "Usage: %s desktop-file" % argv[0]
  return 2
 
 gnome_shell_launch(os.path.expanduser(argv[1]))

def gnome_shell_launch(desktop_file):
 gnome_shell_exec("Shell.AppSystem.get_default().lookup_app_for_path(%s).launch(0,[],-1)"
                  % json.dumps(desktop_file))

def gnome_shell_exec(js):
 bus = dbus.SessionBus()
 Shell = bus.get_object("org.gnome.Shell", "/org/gnome/Shell")
 success, result = Shell.Eval(js, dbus_interface="org.gnome.Shell")
 if not success:
  raise ShellJSError(pretty_error(result))

def pretty_error(result):
 result = json.loads(result)
 error  = "%s\n" % result.get("message", "unknown error")
 keys = ["message", "fileName", "lineNumber", "stack"]
 names = {"fileName":"Filename", "lineNumber": "Line number", "stack": "Stack trace"}
 sep = {"stack": "\n"}
 for key in keys[1:]:
  error += "%s:%s%s\n" % (names[key], sep.get(key, " "), result.get(key, "unknown"))
 for key in result.keys():
  if key not in keys:
   error += "%s: %s\n" % (key, result[key])
 return error.rstrip()

if __name__ == "__main__":
 sys.exit(main(sys.argv))
