#!/usr/bin/env python3

import argparse
import os
import re
import sys
import urllib.parse

import gi  # apt install python3-gi

gi.require_version("Gtk", "3.0")  # apt install gir1.2-gtk-3.0
from gi.repository import Gtk as gtk

gi.require_version("Gdk", "3.0")  # apt install gir1.2-gtk-3.0
from gi.repository import Gdk as gdk

gi.require_version("WebKit2", "4.0")  # apt install gir1.2-webkit2-4.0
from gi.repository import WebKit2 as webkit2

from gi.repository import GLib as glib


APP_NAME = "Mini Browser"
APP_WM_CLASS = "mini-browser"
APP_ICON_NAME = "emblem-web"


def mini_browser(
 url,
 *,
 title=None,
 icon=None,
 wm_class=None,
 _args_compat_mode=False,
):
 default_wm_class = APP_WM_CLASS
 
 if title is None:
  title = APP_NAME
 else:
  if not _args_compat_mode:
   title_clean = re.sub(r"[^0-9a-zA-Z]", "-", title.strip().lower()).strip("-")
  else:
   title_clean = title
  default_wm_class = title_clean or default_wm_class
 
 if not wm_class:
  wm_class = default_wm_class
 
 if not icon:
  icon = APP_ICON_NAME
 
 url = list(urllib.parse.urlsplit(url))
 if not url[0]:
  url[0] = "http"
  url[1] = "/" + url[1]
 url = urllib.parse.urlunsplit(url)
 
 glib.set_prgname(wm_class)
 gdk.set_program_class(wm_class)
 
 w = gtk.Window()
 w.set_title(title)
 w.set_icon_name(icon)
 w.set_size_request(1, 1)
 w.resize(1024, 576)
 w.connect("delete-event", _close_callback)
 
 s = gtk.ScrolledWindow()
 wv = webkit2.WebView()
 s.add(wv)
 w.add(s)
 
 wv.load_uri(url)
 
 _show_window(w)
 gtk.main()


def _close_callback(window, data):
 window.hide()
 gtk.main_quit()


def _show_window(window):
 # Show the window after it has initialized to reduce flashing/repaints.
 # See <https://github.com/polychromatic/polychromatic/commit/8ac2d6f52f11f346b1258ecbab97b0a0fdec8fb9>.
 
 def callback():
  window.show_all()
  return glib.SOURCE_REMOVE
 
 glib.idle_add(callback)


def main(argv):
 prog = os.path.basename(argv[0])
 
 compat_args_len = len([i for i in argv[1:] if not i.startswith("-")])
 compat_mode = compat_args_len == len(argv[1:]) and compat_args_len >= 2
 
 p = argparse.ArgumentParser(
  prog=prog,
 )
 p.add_argument("url", nargs="?", default=None,
                help="the initial URL to load (default: prompt)")
 p.add_argument("-t", "--title", default=None,
                help=f"the window's title (default: {APP_NAME!r})")
 p.add_argument("-i", "--icon", default=None,
                help=f"the window's icon name (default: {APP_ICON_NAME!r})")
 p.add_argument("-c", "--wm-class", default=None,
                help=f"the window's WM_CLASS hint (default: based on title (*)"
                     f" or {APP_WM_CLASS!r})")
 
 p.epilog = """
* If the -c/--wm-class argument is omitted or empty, but -t/--title is set,
then the default WM_CLASS hint will be a sanitized ASCII form of the title,
in snake-case.  This behavior is primarily to keep windows with different names
from being grouped together in desktop environments.  If you wish to rely on
the value of WM_CLASS (e.g. in your window manager's settings or a program),
you should set the -c/--wm-class argument yourself.
""".strip()
 
 if not compat_mode:
  p.parse_args([])  # make sure compat mode won't fail when adding new arguments
  try:
   options = p.parse_args(argv[1:])
  except SystemExit as exc:
   return exc.code
 else:
  # backwards compatibility; do not add new arguments here
  warning = f"{prog}: warning: the positional %s argument is deprecated; use %s instead"
  if len(argv) > 2:
   print(warning % ("title", "-t/--title"), file=sys.stderr)
  if len(argv) > 3:
   print(warning % ("icon", "-i/--icon"), file=sys.stderr)
  if len(argv) > 4:
   print(warning % ("wm-class", "-c/--wm-class"), file=sys.stderr)
  
  options = p.parse_args([])
  options.url = argv[1] or None if len(argv) > 1 else None
  options.title = argv[2] or None if len(argv) > 2 else None
  options.icon = argv[3] or None if len(argv) > 3 else None
  options.wm_class = argv[4] or None if len(argv) > 4 else None
 
 url = options.url
 if url is None or url == ".":
  url = input("Please enter a URL: ")
 
 mini_browser(
  url,
  title=options.title,
  icon=options.icon,
  wm_class=options.wm_class,
  _args_compat_mode=compat_mode,
 )


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
