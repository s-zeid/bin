#!/usr/bin/env python3

import argparse
import hashlib
import os
import re
import sys
import urllib.parse

from typing import *

if TYPE_CHECKING:
 # these are repeated here to preserve the installation instruction
 # comments in the tracebacks for the actual imports
 import gi, gi.repository  # type: ignore

import gi  # apt install python3-gi; apk add py3-gobject3

gi.require_version("Gtk", "3.0")  # apt install gir1.2-gtk-3.0; apk add gtk+3.0
from gi.repository import Gtk as gtk

gi.require_version("Gdk", "3.0")  # apt install gir1.2-gtk-3.0; apk add gtk+3.0
from gi.repository import Gdk as gdk

try:
 gi.require_version("WebKit2", "4.1")  # apt install gir1.2-webkit2-4.1; apk add webkit2gtk-4.1
except ValueError:
 gi.require_version("WebKit2", "4.0")  # apt install gir1.2-webkit2-4.0 (4.1 preferred); apk add webkit2gtk
from gi.repository import WebKit2 as webkit2

from gi.repository import GLib as glib


APP_NAME = "Mini Browser"
APP_WM_CLASS = "mini-browser"
APP_ICON_NAME = "emblem-web"

DEFAULT_WINDOW_SIZE = "1024x576"


def mini_browser(
 url: str,
 *,
 title: str = None,
 icon: str = None,
 wm_class: str = None,
 cookies: bool = False,
 user_agent: str = None,
 dev_tools: bool = True,
 zoom: float = 1,
 size: str = None,
 fullscreen: bool = False,
 position: str = None,
 allow_all_permissions: bool = False,
 _args_compat_mode: bool = False,
):
 default_wm_class = APP_WM_CLASS
 
 if title is None:
  title = APP_NAME
 else:
  if not _args_compat_mode:
   title_clean = re.sub(r"[^0-9a-zA-Z]", "-", title.strip().lower()).strip("-")
  else:
   title_clean = title
  default_wm_class = title_clean or default_wm_class
 
 if not wm_class:
  wm_class = default_wm_class
 
 if not icon:
  icon = APP_ICON_NAME
 
 url_parts = list(urllib.parse.urlsplit(url))
 if not url_parts[0]:
  url_parts[0] = "http"
  url_parts[1] = "/" + url_parts[1]
 url = urllib.parse.urlunsplit(url_parts)
 
 glib.set_prgname(wm_class)
 gdk.set_program_class(wm_class)
 
 w = gtk.Window()
 w.set_title(title)
 w.set_icon_name(icon)
 w.set_size_request(1, 1)
 w.connect("delete-event", _close_callback)
 
 size_args = [int(i) for i in (size or DEFAULT_WINDOW_SIZE).split("x", 1)]
 w.resize(*size_args)
 
 if position:
  position_args = [int(i) for i in position.split(",", 1)]
  w.move(*position_args)
 
 if fullscreen:
  w.maximize()
  w.fullscreen()
 
 s = gtk.ScrolledWindow()
 w.add(s)
 
 wv = _setup_webview(
  wm_class=wm_class,
  cookies=cookies,
  user_agent=user_agent,
  dev_tools=dev_tools,
  zoom=zoom,
  allow_all_permissions=allow_all_permissions,
 )
 s.add(wv)
 
 wv.load_uri(url)
 
 _show_window(w)
 gtk.main()


def _setup_webview(
 *,
 wm_class: str,
 cookies: bool,
 user_agent: Union[str, None],
 dev_tools: bool,
 zoom: float,
 allow_all_permissions: bool,
):
 param_hash = hashlib.sha512("\0".join([
  wm_class or "",
  str(bool(cookies)),
  user_agent or "",
 ]).encode("utf-8")).hexdigest().lower()
 
 data_dir = os.path.join(
  os.environ.get("XDG_CONFIG_HOME", os.path.expanduser("~/.config")),
  APP_WM_CLASS,
  wm_class,
 )
 os.makedirs(data_dir, 0o700, True)
 
 cache_dir = os.path.join(
  os.environ.get("XDG_CACHE_HOME", os.path.expanduser("~/.cache")),
  APP_WM_CLASS,
  wm_class,
 )
 os.makedirs(cache_dir, 0o700, True)
 
 hash_path = os.path.join(cache_dir, "hash")
 hash_matches = False
 try:
  with open(hash_path, "r") as f:
   hash_matches = f.read().strip() == param_hash
 except OSError:
  pass
 
 data_mgr = webkit2.WebsiteDataManager(
  base_data_directory=data_dir,
  base_cache_directory=cache_dir,
 )
 
 ctx = webkit2.WebContext.new_with_website_data_manager(data_mgr)
 if cookies:
  cookie_mgr = ctx.get_cookie_manager()
  cookie_mgr.set_persistent_storage(
   os.path.join(data_dir, "cookies.sqlite"),
   webkit2.CookiePersistentStorage.SQLITE,
  )
 
 wv = webkit2.WebView.new_with_context(ctx)
 settings = webkit2.Settings()
 wv.set_settings(settings)
 
 wv.set_zoom_level(zoom)
 
 if not hash_matches:
  with open(hash_path, "w") as f:
   f.write(param_hash)
  ctx.clear_cache()
 
 if user_agent:
  settings.set_user_agent(user_agent)
 
 if dev_tools:
  settings.set_enable_developer_extras(True)
 
 if allow_all_permissions:
  if hasattr(settings, "set_enable_encrypted_media"):
   settings.set_enable_encrypted_media(True)
  settings.set_enable_media_stream(True)
  if hasattr(settings, "set_enable_webrtc"):
   settings.set_enable_webrtc(True)
  settings.set_media_playback_requires_user_gesture(False)
  
  def allow_all_permissions_handler(_wv, request, _unused = None):
   request.allow()
   if isinstance(request, webkit2.UserMediaPermissionRequest):
    if request.get_property("is-for-audio-device"):
     wv.set_microphone_capture_state(True)
     print(wv.get_microphone_capture_state())
  
  wv.connect("permission-request", allow_all_permissions_handler)
 
 return wv


def _close_callback(window, data):
 window.hide()
 gtk.main_quit()


def _show_window(window):
 # Show the window after it has initialized to reduce flashing/repaints.
 # See <https://github.com/polychromatic/polychromatic/commit/8ac2d6f52f11f346b1258ecbab97b0a0fdec8fb9>.
 
 def callback():
  window.show_all()
  return glib.SOURCE_REMOVE
 
 glib.idle_add(callback)


def main(argv: List[str]):
 prog = os.path.basename(argv[0])
 
 compat_args_len = len([i for i in argv[1:] if not i.startswith("-")])
 compat_mode = compat_args_len == len(argv[1:]) and compat_args_len >= 2
 
 p = argparse.ArgumentParser(
  prog=prog,
 )
 p.add_argument("url", nargs="?", default=None,
                help="the initial URL to load (default: prompt)")
 p.add_argument("-t", "--title", default=None,
                help=f"the window's title (default: {APP_NAME!r})")
 p.add_argument("-i", "--icon", default=None,
                help=f"the window's icon name (default: {APP_ICON_NAME!r})")
 p.add_argument("-c", "--wm-class", default=None,
                help=f"the window's WM_CLASS hint (default: based on title (*)"
                     f" or {APP_WM_CLASS!r})")
 p.add_argument("-u", "--user-agent", default=None,
                help="the user agent to use (default: auto)")
 p.add_argument("-C", "--cookies", action="store_true",
                help="enable persistent cookies (default: disabled)")
 p.add_argument("-z", "--zoom", type=float, default=1,
                help="the zoom level to use (default: 1)")
 p.add_argument("--allow-all-permissions", action="store_true",
                help="allow all permissions requested by Web content")
 p.add_argument("--no-dev-tools", action="store_false", default=True, dest="dev_tools",
                help="disable developer tools (default: enabled)")
 
 g = p.add_mutually_exclusive_group()
 g.add_argument("-s", "--size", default=DEFAULT_WINDOW_SIZE,
                help=f"the window's size (default: {DEFAULT_WINDOW_SIZE})")
 g.add_argument("-F", "--fullscreen", "--fs", action="store_true",
                help="fill the entire screen")
 
 p.add_argument("-p", "--position", default=None,
                help="the window's position, as `{x},{y}` (default: auto)")
 
 p.epilog = """
* If the -c/--wm-class argument is omitted or empty, but -t/--title is set,
then the default WM_CLASS hint will be a sanitized ASCII form of the title,
in snake-case.  This behavior is primarily to keep windows with different names
from being grouped together in desktop environments.  If you wish to rely on
the value of WM_CLASS (e.g. in your window manager's settings or a program),
you should set the -c/--wm-class argument yourself.
""".strip()
 
 if not compat_mode:
  p.parse_args([])  # make sure compat mode won't fail when adding new arguments
  try:
   options = p.parse_args(argv[1:])
  except SystemExit as exc:
   return exc.code
 else:
  # backwards compatibility; do not add new arguments here
  warning = f"{prog}: warning: the positional %s argument is deprecated; use %s instead"
  if len(argv) > 2:
   print(warning % ("title", "-t/--title"), file=sys.stderr)
  if len(argv) > 3:
   print(warning % ("icon", "-i/--icon"), file=sys.stderr)
  if len(argv) > 4:
   print(warning % ("wm-class", "-c/--wm-class"), file=sys.stderr)
  
  options = p.parse_args([])
  options.url = argv[1] or None if len(argv) > 1 else None
  options.title = argv[2] or None if len(argv) > 2 else None
  options.icon = argv[3] or None if len(argv) > 3 else None
  options.wm_class = argv[4] or None if len(argv) > 4 else None
 
 url = options.url
 if url is None or url == ".":
  import readline
  url = input("Please enter a URL: ")
 
 mini_browser(
  url,
  title=options.title,
  icon=options.icon,
  wm_class=options.wm_class,
  cookies=options.cookies,
  user_agent=options.user_agent,
  dev_tools=options.dev_tools,
  zoom=options.zoom,
  size=options.size,
  fullscreen=options.fullscreen,
  position=options.position,
  allow_all_permissions=options.allow_all_permissions,
  _args_compat_mode=compat_mode,
 )


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
