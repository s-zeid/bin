#!/usr/bin/env python3

"""Runs Minecraft.

Launchers should be placed in `~/.minecraft/launchers/`, and a `launchers.yml`
file describing each launcher should be placed in the same directory.  These
paths will be created if necessary, with sane defaults (i.e. it will try to run
the new stock launcher first, then the old launcher, then Magic Launcher as
MagicLauncher.jar).  You will, however, need to manually add the stock launcher
and/or JAR files.  (By default, the new stock launcher's directory is expected
to be located at `~/.minecraft/launchers/stock`.)

If no launcher is given, then the first launcher in launchers.yml that exists
will be executed.

Optional environment variables:

 - `MC_LAUNCHERS_PATH`:  Overrides the launchers directory
 - `MC_LAUNCHERS_YML`:   Overrides the path to `launchers.yml`.
    May be either relative to the launchers directory or absolute.

If this script is invoked as `minceraft`, then it may or may not force the
client to flip the E and C in the title screen logo.

Depends on Python 3, PyYAML, and where:

    fedora$ sudo yum install python3-PyYAML && sudo pip3 install where
    ubuntu$ sudo apt install python3-{yaml,pip} && sudo pip3 install where

launchers.yml should look like this (as an example):

    cwd: ..
    launchers:
     stock:
      cwd:     launchers/stock
      cmd:     ["./launcher"]
      env:
       EXAMPLE: 1
     msvmc-env:
      env:
       LD_PRELOAD: /path/to/libxcustomtitle/libxcustomtitle.so
       X_CUSTOM_TITLE: Microsoft® Visual Mining and Crafting®
     msvmc:
      extends: stock, msvmc-env
     usb:
      extends: stock
      args:    ["-workDir", "/media/USB/Minecraft/.minecraft"]
     portable: usb
     
     stock-old:
      jar:     Minecraft.jar
     msvmc-old:
      extends: stock-old, msvmc-env
     dev-old:
      jar:     MinecraftDev.jar
      args:    ["--proxyHost", "some.proxy.example", "--proxyPort", 1080]

The ordering of the launchers is important.  Without arguments, the first
launcher in the list whose JAR file exists will be executed.

`jar` is either the relative (to `~/.minecraft/launchers/`) or absolute path to
the launcher's JAR file.  This can be omitted if `cmd` is present.

(optional) `env` is a mapping of environment variables to pass to the launcher.
This may be specified either as part of a launcher or globally.  Environment
variables specified inside a launcher key will take precedence.

(optional) `args` is a list of arguments to be passed to a launcher JAR or
command.  This must be specified as part of a launcher.

(optional) `cmd` lets you specify a command to run instead of `java`.  Having
this set will cause `jar` to be ignored.  If this is a list, then the first
element is the executable to run and the others are arguments; if it is a
string, then it is just the executable.  `args` can be used with either form;
arguments in `args` are added to the end of the command.  This must be
specified as part of a launcher.

(optional) `expand-args` is a boolean that lets you disable tilde expansion
of the command's arguments.  Normally, a leading `~/` on the executable path
or any argument will be expanded to the home directory; with this option set
to `True`, only a leading `~/` on the executable path will be expanded.  This
option does not affect the parsing of any argument other than `cmd` in a
launcher.

(optional) `cwd` lets you specify a directory to change into before running
a launcher.  It may be specified either as part of a launcher or globally.  If
defined inside a launcher, it will override the global `cwd` and be evaluated
relative to the global `cwd` if the launcher `cwd` is not an absolute path.
By default, the working directory used for the launcher is the directory
containing `launchers.yml`.

(optional) `extends` indicates that a launcher *extends* one or more other
launchers.  It will inherit all properties of the other launchers in the order
those launchers are listed, and those properties may be overridden.  For
properties which are lists or dictionaries, the values will be combined instead
of replaced.  As a shortcut, if you just want to make an alias of another
launcher, you may define your alias using just a string instead of a mapping
(e.g. "launcher-name: other-launcher").  This must be specified as part of a
launcher.

Any `~/` at the beginning of a path is expanded to the user's home directory.

"""

import math
import os
import platform
import re
import socket
import subprocess
import sys
import time

from collections import OrderedDict

import yaml
import yaml.constructor

# We want the where module if it's available, but if it's not, use a
# minimal implementation that runs the system which command.  On Windows,
# an ImportError will be raised if the real which module is unavailable,
# because Windows (<= XP) doesn't have a which command.  (Support for
# the where command in Vista and later may be added in the future.)
try:
 import where  # pip3 install where
except ImportError:
 if platform.system() == "Windows":
  raise ImportError("The where module is required on Windows."
                    "  Please run `pip3 install where`.")
 class where(object):
  @classmethod
  def first(cls, what):
   p = subprocess.Popen(["which", what], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
   if p.wait() == 0:
    return p.communicate()[0].rstrip(b"\r\n\0").decode(sys.getfilesystemencoding())
   else:
    return None

DEFAULT_LAUNCHERS_PATH = "~/.minecraft/launchers"
DEFAULT_LAUNCHERS_YML  = "launchers.yml"
DEFAULT_YML_CONTENTS = """\
launchers:
 stock:
  cwd:     stock
  cmd:     ["./launcher"]
 stock-old:
  jar:     Minecraft.jar
 magic:
  jar:     MagicLauncher.jar
"""


def main(argv):
 if len(argv) > 1 and argv[1] in ("--help", "-h"):
  if len(argv) > 2 and argv[2] == "launchers.yml":
   print("launchers.yml " + __doc__.split("\n\nlaunchers.yml ")[1].rstrip())
  else:
   print("Usage: %s [--<launcher-name> or --help|-h or --] [launcher_args ...]" % argv[0])
   if len(argv) > 2 and argv[2] == "all":
    print(__doc__.rstrip())
   else:
    print(__doc__.split("\n\nlaunchers.yml ")[0] + "\n")
    print("For information on the format of launchers.yml, run:\n")
    print("    %s %s launchers.yml" % tuple(argv[:2]))
  return 0
 
 config = load_config(
  os.environ.get("MC_LAUNCHERS_PATH", None), os.environ.get("MC_LAUNCHERS_YML", None)
 )
 if not config:
  print("error: could not load configuration", file=sys.stderr)
  return 6
 launchers = config["launchers"]
 if len(launchers) == 0 and (len(argv) > 1 and argv[1] != "--hep"):
  print("error: no launchers configured in launchers.yml", file=sys.stderr)
  return 4
 
 # See if a launcher is requested in argv[1] (must be a key in launchers.yml::launchers).
 # Our launchers dict will be len(1) and want will not be None if a launcher is given.
 # Invalid launchers will result in a warning because they may be a valid argument to
 # the default launcher.
 if len(argv) > 1 and argv[1] == "--":
  want = None
  args = argv[2:]
 elif len(argv) > 1 and argv[1].startswith("--"):
  want = argv[1][2:]
  args = argv[2:]
  if want in launchers:
   launchers = {want: launchers[want]}
  elif want == "hep":
   print("Hep!  Hep!  I'm covered in sawlder! ... Eh?  Nobody comes.")
   print("--Red Green, https://www.youtube.com/watch?v=qVeQWtVzkAQ#t=6m27s")
   return 0
  else:
   print("warning: invalid launcher '%s'" % want, file=sys.stderr)
   return 2
 else:
  want = None
  args = argv[1:]
 
 # Find which launcher to use.  If want == None (i.e. no launcher was requested
 # as argv[1]), then we will use the first launcher whose .jar file exists and
 # is a regular file (or a symlink to one), or is an arbitrary command.
 launcher = None
 for name in launchers:
  l = launchers[name]
  if test_cmd(l, config) or os.path.isfile(os.path.realpath(l["jar"])):
   launcher = l
   break
  elif want:
   file_type = "executable" if "cmd" in l else "jar"
   file_path = prog(l, config) if "cmd" in l else l["jar"]
   print(("error: the %s file '%s' does not exist or is not a regular file"
          % (file_type, file_path)), file=sys.stderr)
   return 1
 if launcher == None:
  print("error: no launcher could be found", file=sys.stderr)
  return 5
 
 # On Linux, it is at least sometimes necessary to explicitly add the JRE
 # native library path to LD_LIBRARY_PATH, so we do that, as well as check
 # to see if Java is on the user's PATH (which is necessary on all platforms).
 java = where.first("java")
 if not java:
  print("error: java is not in your PATH", file=sys.stderr)
  return 3
 java_home = re.sub(r"[\\/]bin[\\/]java$", "", os.path.realpath(java))
 ld_library_path = None
 if platform.system() == "Linux":
  if platform.architecture()[0] == "64bit":
   ld_library_path = os.path.join(java_home, "lib/amd64")
  elif platform.architecture()[0] == "32bit":
   ld_library_path = os.path.join(java_home, "lib/i386")
  if not os.path.isdir(ld_library_path):
   ld_library_path = None
 
 # Populate the environment
 environ = os.environ.copy()
 if config.get("env", None):
  environ.update(OrderedDict([(k, str(config["env"][k])) for k in config["env"]]))
 if launcher.get("env", None):
  environ.update(OrderedDict([(k, str(launcher["env"][k])) for k in launcher["env"]]))
 if ld_library_path:
  if "LD_LIBRARY_PATH" in environ:
   environ["LD_LIBRARY_PATH"] = ld_library_path + ":" + environ["LD_LIBRARY_PATH"]
  else:
   environ["LD_LIBRARY_PATH"] = ld_library_path

 # Get any launcher arguments from launchers.yml and put them *before* the user's arguments
 if launcher.get("args", None):
  args = launcher["args"] + args
 
 # Determine the command to run
 cmd = launcher.get("cmd", ["java", "-jar", launcher["jar"]]) + args
 
 # Run (https://youtu.be/_PUtC6SC2h8)
 os.chdir(launcher.get("cwd", config["cwd"]))
 os.execvpe(cmd[0], cmd, environ)


def load_config(path=None, yml=None):
 if not path: path = DEFAULT_LAUNCHERS_PATH
 if not yml:  yml  = DEFAULT_LAUNCHERS_YML
 path = os.path.expanduser(path)
 yml  = os.path.expanduser(yml)
 
 if not os.path.isabs(yml): yml = os.path.join(path, yml)
 
 if not os.path.exists(path):
  os.mkdir(path, 0o755)
 if not os.path.exists(os.path.realpath(yml)):
  with open(yml, "wb") as fo:
   fo.write(DEFAULT_YML_CONTENTS.encode("utf-8"))
 
 with open(yml, "rb") as fo:
  config = yaml.load(fo.read().decode("utf-8"), OrderedDictYAMLSafeLoader)
 
 config["path"] = path
 config["yml"] = yml
 
 if "cwd" not in config:
  config["cwd"] = path
 elif not os.path.isabs(config["cwd"]):
  config["cwd"] = os.path.normpath(os.path.join(path, config["cwd"]))
 
 # Various transformations on config values
 launchers = config["launchers"]
 for name in launchers:
  process_launcher_entry(name, launchers, config)
 return config


def process_launcher_entry(name, launchers, config):
 l = launchers[name]
 # Handle alternate names
 if isinstance(l, str):
  launchers[name] = l = dict(extends=l)
 # Handle launchers that extend another launcher
 if "extends" in l:
  extends = l["extends"]
  del l["extends"]
  if isinstance(extends, str):
   extends = re.sub(r",\s*", ",", extends).split(",")
  for extend in extends:
   other = process_launcher_entry(extend, launchers, config).copy()
   for k in set(list(l.keys()) + list(other.keys())):
    if k in other:
     if k not in l:
      l[k] = other[k]
     elif isinstance(l[k], dict):
      l[k].update(other[k])
     elif isinstance(l[k], (list, tuple)):
      l[k] = list(l[k])
      l[k][-1:-1] = other[k]
     else:
      l[k] = other[k]
   del l["__values_expanded"]
 if "__values_expanded" not in l:
  if "jar" not in l:
   l["jar"] = ""
  # Expand JAR paths
  if not os.path.isabs(l["jar"]):
   l["jar"] = os.path.expanduser(os.path.join(config["path"], l["jar"]))
  # Command option
  if l.get("cmd", None):
   cmd = normalize_yaml_list(l["cmd"])
   # Make sure it has at least one argument
   if len(cmd) < 1 or cmd[0] == "":
    print("error: launcher commands in launchers.yml cannot be empty", file=sys.stderr)
    return False
   # Expand first argument of the command (the path to the executable)
   cmd[0] = os.path.expanduser(cmd[0])
   # Expand other arguments if this isn't disabled for the launcher
   if l.get("expand-args", True):
    for i in range(1, len(cmd)):
     cmd[i] = os.path.expanduser(cmd[i])
   # Save result
   l["cmd"] = cmd
  # Normalize arguments
  if l.get("args", None):
   l["args"] = normalize_yaml_list(l["args"])
  # Expand working directory
  if l.get("cwd", None):
   cwd = os.path.expanduser(l["cwd"])
   if not os.path.isabs(cwd):
    cwd = os.path.expanduser(os.path.join(config["cwd"], cwd))
   l["cwd"] = cwd
  # Mark these values as expanded
  l["__values_expanded"] = True
 return l


def normalize_yaml_list(l):
 # Normalize type
 if isinstance(l, str):
  l = [l]
 if not isinstance(l, (list, tuple)):
  l = [str(l)]
 l = list(l)
 return l


def prog(l, config):
 if "cmd" not in l:
  return None
 if not len(l["cmd"]):
  return None
 prog = l["cmd"][0]
 if not os.path.isabs(prog):
  prog = os.path.join(l.get("cwd", config.get("cwd", ".")), prog)
 return prog


def test_cmd(l, config):
 if "cmd" not in l:
  return False
 if not len(l["cmd"]):
  return False
 return os.path.isfile(prog(l, config))


# We need to load YAML mappings as OrderedDicts in order to preserve the ordering
# of launcher entries while keeping the launchers.yml schema clean and easy to
# write by hand.
class OrderedDictYAMLSafeLoader(yaml.SafeLoader):
 """
 A YAML loader that loads mappings into ordered dictionaries.
 By enaeseth:  https://gist.github.com/enaeseth/844388
 """

 def __init__(self, *args, **kwargs):
  yaml.SafeLoader.__init__(self, *args, **kwargs)

  self.add_constructor('tag:yaml.org,2002:map', type(self).construct_yaml_map)
  self.add_constructor('tag:yaml.org,2002:omap', type(self).construct_yaml_map)

 def construct_yaml_map(self, node):
  data = OrderedDict()
  yield data
  value = self.construct_mapping(node)
  data.update(value)

 def construct_mapping(self, node, deep=False):
  if isinstance(node, yaml.MappingNode):
   self.flatten_mapping(node)
  else:
   raise yaml.constructor.ConstructorError(None, None,
    'expected a mapping node, but found %s' % node.id, node.start_mark)

  mapping = OrderedDict()
  for key_node, value_node in node.value:
   key = self.construct_object(key_node, deep=deep)
   try:
    hash(key)
   except TypeError as exc:
    raise yaml.constructor.ConstructorError('while constructing a mapping',
     node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)
   value = self.construct_object(value_node, deep=deep)
   mapping[key] = value
  return mapping


if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
