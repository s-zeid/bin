#!/usr/bin/env python2

"""Displays an image without a window border or background.
   
   Based on code from http://bit.ly/qfvule
   
"""

import argparse
import os
import sys

from math import pi

import cairo
import gtk
import pygtk

pygtk.require("2.0")

def close_callback(window, data):
 """Called when the window is closed."""
 window.hide()
 sys.exit(0)

def expose(window, event):
 """Makes a window transparent."""
 cr = window.window.cairo_create()
 # Sets the operator to clear which deletes everything below where an object is
 # drawn
 cr.set_operator(cairo.OPERATOR_CLEAR)
 # Makes the mask fill the entire window
 cr.rectangle(0.0, 0.0, *window.get_size())
 # Deletes everything in the window (since the compositing operator is clear
 # and mask fills the entire window
 cr.fill()
 # Set the compositing operator back to the default
 cr.set_operator(cairo.OPERATOR_OVER)

def main(argv):
 # Get arguments
 parser = argparse.ArgumentParser(prog=argv[0],
           description="Displays an image with no background or"
                       " window decorations.")
 parser.add_argument("filename", help="The image to display")
 parser.add_argument("-s", "--size", type=float, default=100.,
                     help="Desired size of the image as a percentage")
 parser.add_argument("-o", "--opacity", type=float, default=100.,
                     help="Desired opacity of the image as a percentage")
 try:
  args = parser.parse_args(argv[1:])
 except SystemExit as exit:
  return exit.code
 image_filename = args.filename
 size_p         = args.size * 0.01
 opacity        = args.opacity * 0.01
 
 win = gtk.Window()
 win.set_title(os.path.basename(image_filename))
 win.set_decorated(False)
 win.set_resizable(False)
 win.set_opacity(opacity)
 
 # Make sure that the process exits when the window is closed
 win.connect("delete-event", close_callback)
 
 # Makes the window paintable, so we can draw directly on it
 win.set_app_paintable(True)
 
 # This sets the windows colormap, so it supports transparency.
 # This will only work if the wm support alpha channel
 screen = win.get_screen()
 rgba = screen.get_rgba_colormap()
 win.set_colormap(rgba)
 
 # This will actually make the window transparent.
 win.connect("expose-event", expose)
 
 # Load and scale the image
 pixbuf = gtk.gdk.pixbuf_new_from_file(image_filename)
 if size_p != 1:
  pixbuf = gtk.gdk.pixbuf_new_from_file_at_size(image_filename,
            int(round(pixbuf.get_width() * size_p)),
            int(round(pixbuf.get_height() * size_p)))
 
 # Add the image
 img = gtk.image_new_from_pixbuf(pixbuf)
 win.set_size_request(pixbuf.get_width(), pixbuf.get_height())
 win.add(img)
 win.show_all()
 
 # Enter GTK main loop
 gtk.main()
 
 return 0

if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except (KeyboardInterrupt, EOFError):
  pass
