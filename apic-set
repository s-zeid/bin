#!/usr/bin/env python2

# apic-set
# Sets the APIC tag for a given MP3 file, replacing any APIC tag that
# already exists.
# 
# Copyright (c) 2012 S. Zeid.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# 
# 
# EXCEPTION:  Any modified version of this program, or any portion or modified
# portion of this program, which does not use the Mutagen audio tagging library
# may (at your option) be used under the following X11 License instead of the
# GNU General Public License:
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# 
# Except as contained in this notice, the name(s) of the above copyright holders
# shall not be used in advertising or otherwise to promote the sale, use or
# other dealings in this Software without prior written authorization.


""" Sets the APIC tag for a given MP3 file, replacing any APIC tag that already exists.
    
    Usage: apic-set img-filename mp3-filename [...]

    Dependencies: mutagen.id3, magic (optional, `mimetypes` will be used if magic
      is not available)

    You can also import this as a module (rename it first?) and call
    apic_set yourself.

"""


import mimetypes
import os
import sys

from mutagen.id3 import ID3, APIC

try:
 import magic
 HAVE_MAGIC = True
except ImportError:
 HAVE_MAGIC = False

def apic_set(mp3, img, filename=None, mimetype=None,
             mgc_file="/usr/share/misc/magic.mgc"):
 """Sets the album art (APIC tag) for the given MP3 file to the given artwork file.

img is either a string object containing the raw image data or an open file object
to read from.

If an APIC tag already exists, then it will be replaced.

The MIME type is determined as follows:
  1.  If the mimetype argument is set, then it will be used.
  2.  libmagic will be used to get the MIME type.
  3.  If libmagic fails or is not available, then mimetypes.guess_type will be used.
      If filename is set, then it will be used.  Otherwise, if img is a file and
      img.name is set, it will be used.  Otherwise, proceed to the next step.
  4.  The MIME type is assumed to be image/jpeg.

"""
 if isinstance(img, basestring):
  data = img
 elif isinstance(img, file):
  if not filename and getattr(img, "name", None):
   filename = img.name
  data = img.read()
 else:
  raise TypeError("img must be a string or file opened in read mode")
 try:
  id3 = ID3(mp3)
 except:
  raise Exception("Problem reading metadata")
 if mimetype:
  mime = mimetype
 else:
  try:
   if not HAVE_MAGIC:
    raise Exception("no magic; falling back to mimetypes")
   mgc = magic.open(magic.MAGIC_MIME_TYPE)
   r = mgc.load(mgc_file)
   if r != 0:
    mgc.close()
    raise Exception("could not load mgc_file; falling back to mimetypes")
   mime = mgc.buffer(data)
   mgc.close()
   if mime == None:
    raise Exception("problem getting MIME type; falling back to mimetypes")
  except Exception:
   if filename:
    mime = mimetypes.guess_type(filename)[0]
    if not mime:
     mime = "image/jpeg"
   else:
    mime = "image/jpeg"
 desc = os.path.basename(filename)
 id3.add(APIC(type=3, mime=mime, data=data, encoding=3, desc=desc))
 id3.save()

def main(argv):
 if len(argv) < 3:
  print >> sys.stderr, "Usage: %s img-filename mp3-filename [...]" % argv[0]
  return 2
 img_filename = argv[1]
 mp3_filenames = argv[2:]
 for m in mp3_filenames:
  try:
   with open(img_filename, "rb") as f:
    apic_set(m, f)
  except Exception:
   raise
   print >> sys.stderr, "error: could not set album artwork for " + m
   return 1

if __name__ == "__main__":
 try:
  sys.exit(main(sys.argv))
 except KeyboardInterrupt:
  pass
