#!/usr/bin/env python

import optparse
import os
import platform
import shutil
import subprocess
import sys
import tempfile

PE_EXTENSIONS = (".cpl", ".dll", ".drv", ".exe", ".ico", ".ocx", ".scr", ".sys")

if platform.system().lower() == "windows":
 windows = True
 pyinstaller_path = "C:\\Python27\\PyInstaller"
 python_path = "C:\\Python27\\python.exe"
else:
 windows = False
 pyinstaller_path = os.path.expanduser("~/opt/pyinstaller")
 python_path = "python"

def mkexe(infile, outfile, tk=False, windowed=False, icon=None, version=None,
          django=False, pyinstaller_path=None, python_path=None):
 global windows
 pyinstaller_path = pyinstaller_path or globals()["pyinstaller_path"]
 python_path = python_path or globals()["python_path"]
 infile = os.path.abspath(infile)
 outfile = os.path.abspath(outfile)
 basename = os.path.splitext(os.path.basename(infile))[0]
 cwd = os.getcwd()
 tmpdir = tempfile.mkdtemp()
 os.chdir(tmpdir)
 spec = os.path.join(tmpdir, basename + ".spec")
 ret = False
 makespec_cmd = [python_path, pyinstaller_script("Makespec"), "--onefile"]
 if tk:
  makespec_cmd += ["--tk"]
 if windows:
  if windowed:
   makespec_cmd += ["--windowed"]
  if icon:
   icon_path = icon
   if os.path.splitext(icon.rsplit(",", 1)[0])[1].lower() not in PE_EXTENSIONS:
    icon_path = os.path.join(tmpdir, os.path.basename(icon) + ".ico")
    shutil.copy(icon, icon_path)
   makespec_cmd += ["--icon=" + icon_path]
  if version:
   makespec_cmd += ["--version", version]
 makespec_cmd += ["-o", tmpdir, infile]
 if subprocess.call(makespec_cmd) == 0:
  patch_spec(spec, rm_django=(not django))
  if subprocess.call([python_path, pyinstaller_script("Build"), spec]) == 0:
   nametomove = basename + ".exe" if windows else basename
   shutil.move(os.path.join(tmpdir, "dist", nametomove), outfile)
   ret = True
 os.chdir(cwd)
 shutil.rmtree(tmpdir)
 return ret

def patch_spec(spec, rm_django=True):
 with open(spec, "rb") as f:
  s = f.read()
 excludes = []
 if rm_django:
  excludes += ["django"]
 excludes = ", ".join(["'%s'" % i for i in excludes])
 s = s.replace("pathex=[", "excludes=[" + excludes + "], pathex=[", 1)
 with open(spec, "wb") as f:
  f.write(s)

def main(argv):
 global pyinstaller_path, python_path, windows
 usage = "Usage: %s [options] script [exefile]" % os.path.basename(argv[0])
 p = optparse.OptionParser(prog=argv[0], usage=usage,
  description="Makes a standalone executable from a Python script using"
              " PyInstaller.")
 p.add_option("--django", "-D", action="store_true", default=False,
  help="the script represents a Django app.  Defaults to False.")
 p.add_option("--icon", "-i", default=None,
  help="icon to use for the EXE file.  Can be either filename.ico or"
       " filename.exe,index.  (Windows only)")
 p.add_option("--output", "-o", default=None, 
  help="directory to save the resulting file to.  Defaults to the current"
       " directory.")
 p.add_option("--pyinstaller-path", "-P", default=None, dest="pyinstaller",
  help="path to PyInstaller.  Defaults to %s." % pyinstaller_path)
 p.add_option("--python-path", "-p", default=None, dest="python",
  help="path to the Python binary used to run PyInstaller.  Defaults to %s."
        % pyinstaller_path)
 p.add_option("--tk", "-t", action="store_true", default=False,
  help="include TCL/TK in the executable file.")
 p.add_option("--version", "-V", default=None,
  help="version number to use in the EXE file.  (Windows only)")
 p.add_option("--windowed", "-w", action="store_true", default=False,
  help="use the Windows subsystem in the EXE file in order to hide the console"
       " window.  (Windows only)")
 options, args = p.parse_args(argv[1:])
 if len(args) < 1 or len(args) > 2:
  p.print_help()
  sys.exit(2)
 
 output = options.output or "."
 pyinstaller_path = options.pyinstaller or pyinstaller_path
 python_path = options.python or python_path
 script = args[0]
 exename = os.path.splitext(script)[0]
 if windows:
  exename += ".exe"
 exefile = args[1] if len(args) == 2 else exename
 if os.path.isdir(os.path.realpath(exefile)):
  exefile = os.path.join(exefile, exename)
 if mkexe(script, exefile, options.tk, options.windowed, options.icon, 
          options.version, options.django, options.pyinstaller,
          options.python) == False:
  print "building failed!"
  sys.exit(1)

pyinstaller_script = lambda name: os.path.join(pyinstaller_path, name + ".py")

if __name__ == "__main__":
 main(sys.argv)
